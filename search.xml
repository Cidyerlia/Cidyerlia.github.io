<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go语言速成指南（二）</title>
      <link href="/2024/01/20/go-yu-yan-su-cheng-zhi-nan-er/"/>
      <url>/2024/01/20/go-yu-yan-su-cheng-zhi-nan-er/</url>
      
        <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2>]]></content>
      
      
      <categories>
          
          <category> Go语言入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言速成指南（一）</title>
      <link href="/2024/01/13/go-yu-yan-su-cheng-zhi-nan-yi/"/>
      <url>/2024/01/13/go-yu-yan-su-cheng-zhi-nan-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-语言速成指南（一）"><a href="#Go-语言速成指南（一）" class="headerlink" title="Go 语言速成指南（一）"></a>Go 语言速成指南（一）</h1><blockquote><p>把所有的代码跟着敲一遍，基本语法全部能掌握🫡</p><p>代码仓库：<a href="https://github.com/Cidyerlia/learnGo/tree/master">https://github.com/Cidyerlia/learnGo/tree/master</a></p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 变量定义有两种方式</span><span class="token comment">// 方式一：var定义</span><span class="token keyword">var</span> words <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello world"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token comment">// 方式二：`:`定义， 自动推断变量类型</span>sentences <span class="token operator">:=</span> <span class="token string">"hello go"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sentences<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注释：</strong>方式二的定义方法只能在函数中使用。</p><h3 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Go 语言内建类型分为5种，分别是整数类型、浮点数类型、字节类型、复数类型以及布尔类型</span><span class="token comment">// 整数类型</span><span class="token comment">// 定义一个Int类型的整数，int 默认是4字节</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// 定义一个Int8类型的整数</span><span class="token keyword">var</span> b <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">// 定义一个uint类型的整数</span><span class="token keyword">var</span> c <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token number">10</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">// 浮点数类型，不同于其它语言，浮点数类型名称都是float，没有double</span><span class="token keyword">var</span> d <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">10.5</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">// 字节类型</span><span class="token keyword">var</span> e <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'a'</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">var</span> f <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">'你'</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token comment">// 复数类型 3+3i</span><span class="token keyword">var</span> g <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3i</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token comment">// 布尔类型</span><span class="token keyword">var</span> h <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">10101010.59720320(3+3i)true</code></pre><p>重点说明rune类型，其本质是一个Int类型，它的出现主要是为了解决Unicode字符和utf-8编码的问题。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="常量声明"><a href="#常量声明" class="headerlink" title="常量声明"></a>常量声明</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 声明单个常量</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token comment">// 声明多个常量</span><span class="token keyword">const</span> <span class="token punctuation">(</span>StatusOk  <span class="token operator">=</span> <span class="token number">200</span>NotFound  <span class="token operator">=</span> <span class="token number">404</span>Forbidden <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">)</span></code></pre><h3 id="常量枚举"><a href="#常量枚举" class="headerlink" title="常量枚举"></a>常量枚举</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"圆周率："</span><span class="token punctuation">,</span> PI<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"状态码OK: "</span><span class="token punctuation">,</span> StatusOk<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"状态码NotFound: "</span><span class="token punctuation">,</span> NotFound<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Forbidden: "</span><span class="token punctuation">,</span> Forbidden<span class="token punctuation">)</span><span class="token comment">// 常量用来枚举</span><span class="token keyword">const</span> <span class="token punctuation">(</span>Red <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// 默认是0开始</span>GreenBlue<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"红色的枚举值："</span><span class="token punctuation">,</span> Red<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"绿色的枚举值："</span><span class="token punctuation">,</span> Green<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"蓝色的枚举值："</span><span class="token punctuation">,</span> Blue<span class="token punctuation">)</span>    <span class="token comment">// 常量表达式可以执行任意精度的计算</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">3e20</span> <span class="token operator">/</span> PIfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b: "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 基本的if语句</span>num <span class="token operator">:=</span> <span class="token number">10</span><span class="token keyword">if</span> num<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"是偶数"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// if-else</span><span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"是正数"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"是负数"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// if-else if</span><span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"大于10"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"等于10"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"小于10"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 用if语句定义局部变量</span><span class="token keyword">if</span> scope <span class="token operator">:=</span> <span class="token number">24</span><span class="token punctuation">;</span> scope <span class="token operator">></span> num <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"scope > num"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// switch case 是个值</span>n <span class="token operator">:=</span> <span class="token number">3</span><span class="token keyword">switch</span> n <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n == 1"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n == 3"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n == xx"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// switch case 是个表达式</span><span class="token keyword">switch</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n是奇数"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n是偶数"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="基本for循环"><a href="#基本for循环" class="headerlink" title="基本for循环"></a>基本for循环</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 基本的for</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d次循环\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="省略部分元素的for循环"><a href="#省略部分元素的for循环" class="headerlink" title="省略部分元素的for循环"></a>省略部分元素的for循环</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//  for省略前置语句</span>j <span class="token operator">:=</span> <span class="token number">5</span><span class="token keyword">for</span> <span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d次循环\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="while风格的for"><a href="#while风格的for" class="headerlink" title="while风格的for"></a>while风格的for</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// for循环只包含条件表达式，类似while语句</span>k <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%d次循环\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>    k<span class="token operator">++</span><span class="token punctuation">&#125;</span></code></pre><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">//无限循环 相当于while true</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"进入死循环"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="for-range循环"><a href="#for-range循环" class="headerlink" title="for range循环"></a>for range循环</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// for range 遍历字符串</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> char <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token string">"hello"</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"index： %d , charactor is %c\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历map</span>m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key is %s and value is %d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历通道</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>ch <span class="token operator">&lt;-</span> <span class="token number">1</span>ch <span class="token operator">&lt;-</span> <span class="token number">2</span>ch <span class="token operator">&lt;-</span> <span class="token number">3</span><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"从通道取值："</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组基础用法"><a href="#数组基础用法" class="headerlink" title="数组基础用法"></a>数组基础用法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 定义长度为5的数组，默认值为0</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array-a: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">// 设置数组特定位置的值</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array-a: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment">// 获取数组的长度</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array-a的长度是："</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 使用数组字面量初始化并赋值</span>b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array-b: "</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">// 二维数组声明和初始化</span><span class="token keyword">var</span> twoD <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>        twoD<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array-twoD: "</span><span class="token punctuation">,</span> twoD<span class="token punctuation">)</span><span class="token comment">// 声明数组省略长度，编译器自动计算</span>c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"array-c: "</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment">// 遍历数组 -- 不介绍了，一般都是for range遍历</span></code></pre><h3 id="数组作为参数传值"><a href="#数组作为参数传值" class="headerlink" title="数组作为参数传值"></a>数组作为参数传值</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">modifyArray</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"modify arr: "</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 重点：数组传参是传值！！</span>d <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"before modify: "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token function">modifyArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"after modify: "</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">before modify:  [1 1 1 1 1]modify arr:  [100 3 4 5 6]after modify:  [1 1 1 1 1]</code></pre><p>从结果上来看，原来的数组元素根本没有没修改，这是因为数组作为参数是“传值”操作，形参是拷贝的数组所有元素，函数内的操作都是针对实参的副本元素进行操作，当函数执行结束，形参被销毁。因此，不会对原来的数组造成任何影响。</p><p>那么如何能做到在一个函数里修改原来数组元素的操作呢？那就要继续学习<strong>切片</strong>的知识。</p>]]></content>
      
      
      <categories>
          
          <category> Go语言入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang复盘总结</title>
      <link href="/2023/12/17/golang-fu-pan-zong-jie/"/>
      <url>/2023/12/17/golang-fu-pan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="学习Golang时遇到的似懂非懂的概念"><a href="#学习Golang时遇到的似懂非懂的概念" class="headerlink" title="学习Golang时遇到的似懂非懂的概念"></a>学习Golang时遇到的似懂非懂的概念</h1><h2 id="背景🐋"><a href="#背景🐋" class="headerlink" title="背景🐋"></a>背景🐋</h2><p>这是我学习golang的第三天，大致已经掌握了golang的语法，但是着手开发的时候，却遇到了许多问题，例如golang导包机制、golang的项目管理规范、go mod生成project怎么管理依赖的等等。其实这些概念之前也了解过，但是也只是如蜻蜓点水般的了解。正好，现在遇到了这些问题，那便认真总结一番。</p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="一个优秀的Go项目的布局是怎样的？😎"><a href="#一个优秀的Go项目的布局是怎样的？😎" class="headerlink" title="一个优秀的Go项目的布局是怎样的？😎"></a>一个优秀的Go项目的布局是怎样的？😎</h3><p>这个我在网上搜了很多的资料，不管是博客还是视频，他们大部分教的是在Go ENV路径下创建你的project，然后cd到你的project，接着在该项目文件夹下创建bin、src 和pkg目录。目录布局大致如下：</p><pre class="language-none"><code class="language-none">.├── bin├── pkg├── src│   ├── github.com│   │   ├── user│   │   │   └── project1│   │   └── user│   │       └── project2│   ├── main.go│   └── other.go├── vendor├── Makefile└── README.md</code></pre><ul><li><code>bin</code> 目录放置编译生成的可执行文件。</li><li><code>pkg</code> 目录放置编译生成的包文件。</li><li><code>src</code> 目录是源码目录，它包含了项目的所有Go源代码，外部依赖库的源代码也可以放在该目录下。</li><li><code>vendor</code> 目录存储了第三方依赖库的代码，类似于其他语言中的 <code>node_modules</code> 目录或 <code>pip</code> 的 <code>virtualenv</code> 机制。</li><li><code>Makefile</code> 包含了项目的构建与管理规则，如编译、测试、部署等。</li><li><code>README.md</code> 文件包含了项目的说明文档和使用说明。</li></ul><p>这种目录布局其实还挺清晰的，但是自从go引入go modules做依赖管理，项目布局结构会变得更精简，更灵活。具体目录布局如下所示：</p><pre class="language-none"><code class="language-none">.├── cmd│   └── main.go├── internal├── pkg├── vendor├── go.mod└── README.md</code></pre><ul><li><code>cmd</code> 目录是程序的入口代码，即 <code>main</code> 函数的实现。</li><li><code>internal</code> 目录用于存放应用程序的私有代码，不能被其他项目引用。</li><li><code>pkg</code> 目录用于存放应用程序的公共库代码，可以被其他项目引用。</li><li><code>vendor</code> 目录用于存放依赖库的代码，类似于其他语言中的 <code>node_modules</code> 目录或 <code>pip</code> 的 <code>virtualenv</code> 机制。</li><li><code>go.mod</code> 是 Go modules 的配置文件，用于管理依赖关系和版本控制。</li><li><code>README.md</code> 文件包含了项目的说明文档和使用说明。</li></ul><p>当然根据业务要求，我们还可以添加docs目录存放项目文档，添加test目录存放单元测试代码。</p><p>Tonybai大佬的图画的相当不错，我这边引用一下，大家看完图就知道一个Go语言的经典布局该是什么样的了。</p><p>ps：图有点糊，将就一下……</p><img src="/2023/12/17/golang-fu-pan-zong-jie/fig1.jpg" class="" title="以构建二进制可执行项目为目的的Go项目"><img src="/2023/12/17/golang-fu-pan-zong-jie/fig2.jpg" class="" title="以构建Go语言项目结构为目的的Go项目"><p>项目结构目录重点突出一个清晰明了，我们需要清楚每个目录代表的含义是什么，每个目录下的文件有哪些，目录文件的调用关系，目录文件的隐蔽性等等。</p><h3 id="为什么一定是go-mod？🤔"><a href="#为什么一定是go-mod？🤔" class="headerlink" title="为什么一定是go mod？🤔"></a>为什么一定是go mod？🤔</h3><p>我提出这个问题并不是吹毛求疵，而是真心想了解在没go module管理时，大家不也写的好好的么，为什么go module出来后，大家会立马抛弃以前的做法。这 go module到底带来了什么好处，如此吸引人。</p><p>我还是从项目布局上理解，在没有go module管理时，大家的项目布局应该长这样：</p><pre class="language-none"><code class="language-none">.├── bin├── pkg├── src│   ├── github.com│   │   ├── user│   │   │   └── project1│   │   └── user│   │       └── project2│   ├── main.go│   └── other.go├── vendor├── Makefile└── README.md</code></pre><p>首先在 Go 1.11 版本之前，如果要在 <code>$GOPATH</code> 中运行一个项目，该项目必须存放在 <code>$GOPATH/src</code> 目录下。布局里就包含了project1和project2两个项目文件目录。这会导致你的src目录越来越肿大。</p><p>其次是手动管理依赖问题。在Go 1.11版本之前，Go 语言没有官方的依赖管理工具，因此在项目中引入外部依赖库的时候，通常需要手动将依赖库的代码拷贝到 <code>$GOPATH/src</code> 目录下。这个光不是手动下载的事，你还要考虑到手动更新，依赖之间的冲突问题，部署的问题等等。在倡导DEVOPS的时代，哪一个都是让人分心头痛的事😣。</p><p>然而，go module解决了上述问题（怪不得大家会极力拥抱这门新技术）。这里举个例子说明两者的差别，让思路更清晰。</p><p>假设有两个项目 A 和项目 B，都依赖于 Go 语言的一个第三方库 <code>github.com/gin-gonic/gin</code>。其中，项目 A 使用传统的依赖管理方式，项目 B 使用 Go modules 来管理依赖。</p><ol><li>使用传统的依赖管理方式的项目 A：</li></ol><p>项目 A 的目录结构如下：</p><pre class="language-none"><code class="language-none">.├── main.go└── vendor    └── github.com        └── gin-gonic            └── gin                ├── LICENSE                ├── README.md                ├── bindings                ├── contributing.md                ├── favicon.ico                ├── gin.go                ├── go.mod                ├── go.sum                ├── handlers                ├── logger.go                ├── middleware.go                ├── render                ├── router.go                └── vendor</code></pre><p><code>main.go</code> 文件中引入了 <code>github.com/gin-gonic/gin</code>：</p><pre class="language-none"><code class="language-none">package mainimport (&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;)func main() &#123;r :&#x3D; gin.Default()&#x2F;&#x2F; ...&#125;</code></pre><p>在项目 A 中，依赖库 <code>github.com/gin-gonic/gin</code> 的代码被存放在 <code>vendor</code> 目录中，无法和其他项目共享使用。需要说明地是，使用 <code>vendor</code> 目录来管理依赖库是 Go 语言在 Go 1.5 版本时引入的方式。在使用 <code>vendor</code> 目录管理依赖库的时候，你需要将依赖库的代码复制到项目目录下的 <code>vendor</code> 目录下，然后在代码中引用这些依赖库。如果这个依赖库的版本发生升级，需要手动更新并重新拷贝代码到 <code>vendor</code> 目录，容易出现版本冲突或遗漏问题。</p><ol start="2"><li>使用 Go modules 的项目 B：</li></ol><p>项目 B 的目录结构如下：</p><pre class="language-none"><code class="language-none">.├── go.mod├── main.go└── vendor</code></pre><p><code>main.go</code> 文件中同样引入了 <code>github.com/gin-gonic/gin</code>：</p><pre class="language-none"><code class="language-none">package mainimport (&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;)func main() &#123;r :&#x3D; gin.Default()&#x2F;&#x2F; ...&#125;</code></pre><p>在项目 B 中，使用 <code>go mod</code> 命令来管理依赖库和版本，无需手动拷贝依赖库代码。执行以下命令会自动下载依赖库代码至 <code>$GOPATH/pkg/mod</code> 目录下：</p><pre class="language-none"><code class="language-none">go mod init example.com&#x2F;Bgo mod tidy</code></pre><p>安装完依赖库后，可以把 <code>$GOPATH/pkg/mod</code> 目录下的 <code>github.com/gin-gonic/gin</code> 目录拷贝到其他项目中使用，从而实现依赖共享。如果需要升级或切换依赖库的版本，只需要修改 <code>go.mod</code> 文件中的版本号即可，不会影响到其他项目。</p><p>这里可能有一个歧义的点，就是“拷贝到其它项目中使用”这个说法。依我看，go mod会自动安装你所需要库的依赖，它会在本地留下缓存信息。那么如果另一个项目中也需要使用 <code>github.com/gin-gonic/gin</code>，可以直接在代码中引用该依赖库，如下所示：</p><pre class="language-none"><code class="language-none">package mainimport (&quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;)func main() &#123;r :&#x3D; gin.Default()&#x2F;&#x2F; ...&#125;</code></pre><p>只要之前已经在任意一个项目中使用了 <code>go mod</code> 命令下载过并缓存了 <code>github.com/gin-gonic/gin</code>，Go 会自动从缓存中加载依赖库代码，而不会重新下载依赖库代码到 <code>$GOPATH/pkg/mod</code> 目录下。</p><p>这种方式可以实现依赖库的共享，避免了多个项目同时拷贝依赖库代码，节省了磁盘空间。同时，如果需要使用不同的版本号，可以通过修改 <code>go.mod</code> 文件来实现对特定版本的依赖管理。</p><p>当你修改了 <code>go.mod</code> 文件中的依赖版本号或者添加了新的依赖项之后，可以使用 <code>go mod tidy</code> 命令来更新依赖关系，例如：</p><pre class="language-none"><code class="language-none">go mod edit -require github.com&#x2F;gin-gonic&#x2F;gin@v1.7.2  # 修改 go.mod 文件中的依赖版本号go mod tidy  # 更新依赖关系</code></pre><p><code>go mod tidy</code> 会根据 <code>go.mod</code> 文件中的依赖关系自动下载并更新依赖库代码，以保持依赖关系的一致性，并且会删除未被引用的依赖项。</p><p>另外，如果你还希望移除某一个不再使用的依赖库，可以使用 <code>go mod tidy -v</code> 命令，它会输出垃圾收集的详细信息，包括哪些依赖项是被移除的。</p><h3 id="Go的导包机制是什么？✌️"><a href="#Go的导包机制是什么？✌️" class="headerlink" title="Go的导包机制是什么？✌️"></a>Go的导包机制是什么？✌️</h3><blockquote><p>我的人生信条就是优雅，如何优雅地导包也是我所追求的。</p></blockquote><p>在了解怎么导包之前，我们先需要了解包在Go里面的具象化的体现是什么？包和模块的区别是什么？</p><p>抛开语言，从软件角度考虑，我们认为子程序的集合称为包，包的集合称为模块，模块的集合称为子系统，子系统的集合称为系统。将这个说法往Go语言上代入，能发现我们编写的go文件就是子程序，go文件所在文件夹就是包，根目录的文件名就是模块名。这些具象化的体现还能从哪里看出来呢？其实还能从我们创建的文件中看出。</p><p>以这样的目录结构为例：</p><pre class="language-none"><code class="language-none">project&#x2F;|- go.mod|- main.go|- controllers&#x2F;   |- user.go   |- admin.go</code></pre><p>其中：</p><ul><li><code>go.mod</code> 是模块文件，位于项目根目录。</li><li><code>main.go</code> 是入口文件，位于项目根目录。</li><li><code>controllers/</code> 目录下有两个文件 <code>user.go</code> 和 <code>admin.go</code></li></ul><p>一般来说，当你查看go.mod文件时，能看到第一行写着</p><pre class="language-none"><code class="language-none">module project</code></pre><p>这是告诉你模块名是project。如果以后你的代码开源了，别人想引用你的代码，首先就是要根据你的模块名再找对应的包名。这和其它语言引包的方式很相似。</p><p>module后面的模块名是允许修改的，你可以换成自定义的写法，通常的写法是<code>域名+项目名</code>。</p><p>再打开user.go，你能发现第一行写着</p><pre class="language-none"><code class="language-none">package controllers</code></pre><p>这是指user.go是controllers包下面的一个子程序。</p><p>理清楚这些概念，我们还需要记住一个总纲：“导包其实就是寻址！导包其实就是寻址！导包其实就是寻址！”。重要的话说三遍！</p><p>还是以上面的目录结构为例，如果需要在 <code>main.go</code> 中导入 <code>controllers/user.go</code> 文件中的代码，可以使用相对路径 <code>./controllers</code> 来导入 <code>user.go</code> 文件。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; main.gopackage mainimport &quot;.&#x2F;controllers&quot;func main() &#123;    &#x2F;&#x2F; ...&#125;</code></pre><p>对于模块，可以使用模块路径来引用相对路径下的文件。例如，假设你的模块路径为 <code>example.com/mymodule</code>，则可以在 <code>main.go</code> 中使用 <code>example.com/mymodule/controllers</code> 来引用相对路径下的 <code>user.go</code> 文件。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; main.gopackage mainimport &quot;example.com&#x2F;mymodule&#x2F;controllers&quot;func main() &#123;    &#x2F;&#x2F; ...&#125;</code></pre><p>需要注意的是，使用相对路径导入包时，包的实际路径是相对于当前文件所在的目录。如果在其他文件中也要使用相对路径导入 <code>controllers/user.go</code>，则需要将路径设置为相对于这个文件的路径。同时，相对路径只适用于模块内的代码，如果要在不同的模块之间导入代码，必须使用完整的包路径。</p><h3 id="Go的测试代码怎么生成？👀"><a href="#Go的测试代码怎么生成？👀" class="headerlink" title="Go的测试代码怎么生成？👀"></a>Go的测试代码怎么生成？👀</h3><p>在 Go 中，我们可以通过创建测试文件来编写测试代码。测试文件应该遵循 Go 的命名规则，即在文件名后面加上 <code>_test</code>。例如，如果要编写一个名为 <code>sum</code> 的函数的测试代码，那么测试文件的文件名应该是 <code>sum_test.go</code>，而被测试的函数前面要加个Test前缀。</p><p>在测试文件中，我们可以使用 <code>testing</code> 包提供的一系列函数来编写测试代码，例如 <code>testing.T</code> 的 <code>Error</code>、<code>Fail</code> 和 <code>Fatal</code> 函数，以及 <code>testing.B</code> 的 <code>ReportAllocs</code>、<code>ResetTimer</code> 和 <code>StopTimer</code> 等函数。</p><p>下面是一个简单的测试示例，测试 <code>sum</code> 函数：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; sum_test.gopackage mainimport &quot;testing&quot;func TestSum(t *testing.T) &#123;    tables :&#x3D; []struct &#123;        a, b, expected int    &#125;&#123;        &#123;1, 1, 2&#125;,        &#123;2, 2, 4&#125;,        &#123;3, 3, 6&#125;,    &#125;for _, table :&#x3D; range tables &#123;    result :&#x3D; sum(table.a, table.b)    if result !&#x3D; table.expected &#123;        t.Errorf(&quot;Sum of %d + %d was incorrect, expected %d but received %d&quot;, table.a, table.b, table.expected, result)    &#125;&#125;&#125;</code></pre><p>在这个测试文件中，我们首先导入 <code>testing</code> 包，并定义了一个名为 <code>TestSum</code> 的测试函数。<code>tables</code> 定义了一个结构体切片，其中包含了一组要测试的参数和期望结果。我们遍历 <code>tables</code> 切片，逐一测试每组数据，判断计算结果是否和期望的结果一致。如果不一致，我们使用 <code>t.Errorf</code> 函数输出错误信息。这样就完成了一个简单的测试文件。</p><p>要运行测试文件，可以在项目根目录下使用 <code>go test</code> 命令运行。Go 会自动查找并运行所有的测试文件，并输出测试结果。测试结果中会显示测试用例的数量、测试是否通过以及每个测试用例的具体信息。例如：</p><pre class="language-none"><code class="language-none">$ go testPASSok      project 0.008s</code></pre><p>在本示例中，我们只有一个测试用例，测试结果判定为 “ PASS ”，表示测试通过了。如果测试失败，则测试结果会判定为 “ FAIL ”，并输出具体的错误信息。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://tonybai.com/2022/04/28/the-standard-layout-of-go-project/">https://tonybai.com/2022/04/28/the-standard-layout-of-go-project/</a></p>]]></content>
      
      
      <categories>
          
          <category> Go语言入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s集群认证和授权</title>
      <link href="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/"/>
      <url>/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="K8s集群中的认证和授权"><a href="#K8s集群中的认证和授权" class="headerlink" title="K8s集群中的认证和授权"></a>K8s集群中的认证和授权</h1><h2 id="K8s里的两类用户"><a href="#K8s里的两类用户" class="headerlink" title="K8s里的两类用户"></a>K8s里的两类用户</h2><p>K8s提供了丰富的认证和授权机制，可以满足各种场景细粒度的访问控制。在k8s中有两类用户使用客户端访问，第一类是<strong>用户账户（UserAccount）</strong>，一般是集群外部使用。例如，运维人员或者集群管理人员，使用kubectl命令的发起者就是用户账户。第二类是<strong>服务账户（ServiceAccount），</strong>一般是给集群内部的Pod做身份认证。比如，Pod中的进程需要访问API Server获取一些信息，此时使用的就是ServiceAccount。</p><h2 id="UserAccount的认证及权限管控"><a href="#UserAccount的认证及权限管控" class="headerlink" title="UserAccount的认证及权限管控"></a>UserAccount的认证及权限管控</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>建立一个dev集群用作开发工作，在dev集群中，前端开发人员xiaoming在命名空间fronted中工作，后端开发人员xiaohong在命名空间backend中工作。xiaoming和xiaohong访问API Server需要x509机制认证自己身份，然后仅可以在自身的命名空间里进行操作，不可以跳转获取其他命名空间的资源。</p><h3 id="kubeconfig内容详解"><a href="#kubeconfig内容详解" class="headerlink" title="kubeconfig内容详解"></a>kubeconfig内容详解</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">clusters</span><span class="token punctuation">:</span> <span class="token comment"># 这个意思是需要连接到哪个集群【下面3-6行为一组】，需要添加多少新集群，就复制3-6行添加到6行下面并修改相关信息</span><span class="token key atrule">cluster</span><span class="token punctuation">:</span> <span class="token comment"># 集群开头【3-6行为一组】</span>              <span class="token key atrule">certificate-authority-data</span><span class="token punctuation">:</span> <span class="token comment">#这个是指定用于验证 API 服务器证书的 CA（证书颁发机构）的 Base64 编码格式的数据</span>              <span class="token key atrule">server</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//XX.XX.XX.XX<span class="token punctuation">:</span><span class="token number">6443</span> <span class="token comment">#这个集群的master节点ip</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes <span class="token comment">#集群名称，可以自定义</span>contexts<span class="token punctuation">:</span><span class="token comment">#上下文，将上面的集群【clusters】和下面的用户【users】绑定在一起【未绑定前他们是相互独立的】</span>      <span class="token punctuation">-</span> <span class="token key atrule">context</span><span class="token punctuation">:</span> <span class="token comment">#上下文开头【8-12行为一组】，有多少集群添加多少上下文，放12行下面</span>              <span class="token key atrule">cluster</span><span class="token punctuation">:</span> kubernetes <span class="token comment">#这个是上面cluster的name</span>              <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default <span class="token comment">#所处命名空间【默认default】</span>              <span class="token key atrule">user</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>admin <span class="token comment">#这个是下面user的name</span>              <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>admin@kubernetes <span class="token comment"># 这个上下文名称可以自定义</span>              <span class="token key atrule">current-context</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>admin@kubernetes <span class="token comment"># 这个是默认上下文名称【cluster的name】【比如有多个集群，使用哪个上下文，就默认在哪个集群下】</span>              <span class="token key atrule">kind</span><span class="token punctuation">:</span> Config              <span class="token key atrule">preferences</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>              <span class="token key atrule">users</span><span class="token punctuation">:</span> <span class="token comment"># 这指定用户信息【下面17-20为一组】，有多少集群添加多少用户【复制内容放20行下面】</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>admin  <span class="token comment"># 用户名称可以自定义</span>                <span class="token key atrule">user</span><span class="token punctuation">:</span>                <span class="token key atrule">client-certificate-data</span><span class="token punctuation">:</span> <span class="token comment">#指定用于客户端进行身份验证的证书的 Base64 编码格式的数据</span>                <span class="token key atrule">client-key-data</span><span class="token punctuation">:</span> <span class="token comment">#指定用于客户端身份验证的客户端私钥的 Base64 编码格式的数据</span></code></pre><p>简要来说，一个kubeconfig由三大部分构成。第一部分是<strong>cluster的配置</strong>，指定你要连接的集群。第二部分是<strong>contexts</strong>，指定上下文连接的配置，即哪个用户（who）连接集群（where）的哪个命名空间（which）。第三部分指定<strong>用户的配置</strong>，即用户认证需要的Key值。</p><h3 id="创建证书key"><a href="#创建证书key" class="headerlink" title="创建证书key"></a>创建证书key</h3><pre class="language-bash" data-language="bash"><code class="language-bash">openssl genrsa <span class="token parameter variable">-out</span> xiaoming.key <span class="token number">2048</span>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> xiaoming.key <span class="token parameter variable">-out</span> xiaoming.csr <span class="token parameter variable">-subj</span> <span class="token string">'/CN=xiaoming'</span>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> xiaoming.csr <span class="token parameter variable">-CA</span> /etc/kubernetes/pki/ca.crt <span class="token parameter variable">-CAkey</span> /etc/kubernetes/pki/ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> xiaoming.crt <span class="token parameter variable">-days</span> <span class="token number">3650</span></code></pre><p>openssl常见选项：</p><p>• days：指定证书过期时间</p><p>• -CA：指定使用的CA证书</p><p>• -CAkey：指定使用CA证书的私钥</p><p>• -CAcreateserial：自动创建CA的序列号</p><p>• -in：待签名的文件</p><p>• -out：输出</p><p>结果如下：</p><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig1.png" class=""><h3 id="更改集群配置和用户上下文"><a href="#更改集群配置和用户上下文" class="headerlink" title="更改集群配置和用户上下文"></a>更改集群配置和用户上下文</h3><p>这三步就是构建kubeconfig的三大组成结构</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">set<span class="token punctuation">-</span>clusterkubectl config set<span class="token punctuation">-</span>cluster dev \  <span class="token punctuation">-</span><span class="token punctuation">-</span>certificate<span class="token punctuation">-</span>authority=/etc/kubernetes/pki/ca.crt \  <span class="token punctuation">-</span><span class="token punctuation">-</span>embed<span class="token punctuation">-</span>certs=true \  <span class="token punctuation">-</span><span class="token punctuation">-</span>server=http<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>6443 \  <span class="token punctuation">-</span><span class="token punctuation">-</span>kubeconfig=xiaoming.kubeconfigset<span class="token punctuation">-</span>credentialskubectl config set<span class="token punctuation">-</span>credentials xiaoming \  <span class="token punctuation">-</span><span class="token punctuation">-</span>client<span class="token punctuation">-</span>certificate=/root/xiaoming.crt \  <span class="token punctuation">-</span><span class="token punctuation">-</span>embed<span class="token punctuation">-</span>certs=true \  <span class="token punctuation">-</span><span class="token punctuation">-</span>client<span class="token punctuation">-</span>key=/root/xiaoming.key \  <span class="token punctuation">-</span><span class="token punctuation">-</span>kubeconfig=xiaoming.kubeconfigset<span class="token punctuation">-</span>contextkubectl config set<span class="token punctuation">-</span>context dev<span class="token punctuation">-</span>fronted \  <span class="token punctuation">-</span><span class="token punctuation">-</span>cluster=dev \  <span class="token punctuation">-</span><span class="token punctuation">-</span>user=xiaoming \  <span class="token punctuation">-</span><span class="token punctuation">-</span>namespace=fronted \  <span class="token punctuation">-</span><span class="token punctuation">-</span>kubeconfig=xiaoming.kubeconfig</code></pre><p>参数说明：</p><p>• –embed-certs&#x3D;true：表示将CA证书内容写入到此kubeconfig中</p><p>• –certificate-authority：指定CA证书</p><p>• –kubeconfig&#x3D;xiaoming.kubeconfig：指定内容写入xiaoming.kubeconfig中</p><p>最后，切换上下文</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl config use-context dev-fronted <span class="token parameter variable">--kubeconfig</span><span class="token operator">=</span>xiaoming.kubeconfig</code></pre><p>此时已完成认证功能，随便找个客户端，使用xiaoming.kubeconfig即可和API Server通信。注意，此时用户xiaoming是没有任何授权的，换言之，它是admin用户。如果想将用户xiaoming的权限规范起来，就必须为用户xiaming配置rbac。</p><h3 id="创建角色身份"><a href="#创建角色身份" class="headerlink" title="创建角色身份"></a>创建角色身份</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> fronted  <span class="token key atrule">name</span><span class="token punctuation">:</span> xiaoming<span class="token key atrule">rules</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'watch'</span><span class="token punctuation">,</span> <span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'create'</span><span class="token punctuation">,</span> <span class="token string">'patch'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">]</span></code></pre><p>使用kubectl apply -f role.yaml定义xiaoming角色和权限规则。在role.yaml文件中定义了xiaoming仅能够对命名空间为fronted下的所有的资源具备get、wathch、list、delete、create等权限。</p><h3 id="创建角色绑定"><a href="#创建角色绑定" class="headerlink" title="创建角色绑定"></a>创建角色绑定</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> xiaoming  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> fronted<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> User    <span class="token key atrule">name</span><span class="token punctuation">:</span> xiaoming    <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> xiaoming  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</code></pre><p>使用kubectl apply -f rolebinding.yaml将Role绑定用户账户。</p><p>最后一步<strong>切换上下文</strong>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl config use-context dev-fronted <span class="token parameter variable">--kubeconfig</span><span class="token operator">=</span>xiaoming.kubeconfig</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig2.png" class=""> <h2 id="ServiceAccount认证及权限管控"><a href="#ServiceAccount认证及权限管控" class="headerlink" title="ServiceAccount认证及权限管控"></a>ServiceAccount认证及权限管控</h2><p>Service Account常用的认证方式是service account token。该token定义了一个pod具有怎样的权限。</p><p>一个service account主要包括三个内容：namespace、token和ca</p><p>• namespace：指定pod所在的namespace</p><p>• token：用作身份认证</p><p>• ca：验证API Server的身份</p><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig3.png" class=""> <h3 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h3><p>集群管理员针对pod的需求，定制化service account，做到权限最小分配的原则，只对有需要的pod配置相应较高的service account，其他pod使用默认的service account。</p><h3 id="创建sa"><a href="#创建sa" class="headerlink" title="创建sa"></a>创建sa</h3><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl create sa foo</code></pre><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig4.png" class=""> <h3 id="查看foo的详细信息"><a href="#查看foo的详细信息" class="headerlink" title="查看foo的详细信息"></a>查看foo的详细信息</h3><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get sa foo <span class="token parameter variable">-o</span> wide</code></pre><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig5.png" class=""> <p>当创建一个sa时，会自动绑定一个secret。</p><p>注：此时在pod中直接使用secret和API SERVER交互是被拒绝的。因为sa还没有被授权。</p><h3 id="创建角色身份-1"><a href="#创建角色身份-1" class="headerlink" title="创建角色身份"></a>创建角色身份</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'watch'</span><span class="token punctuation">,</span><span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'create'</span><span class="token punctuation">,</span> <span class="token string">'patch'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span></code></pre><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig6.png" class=""> <h3 id="创建角色绑定-1"><a href="#创建角色绑定-1" class="headerlink" title="创建角色绑定"></a>创建角色绑定</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> foo<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> test  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</code></pre><h3 id="绑定pod和sa"><a href="#绑定pod和sa" class="headerlink" title="绑定pod和sa"></a>绑定pod和sa</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> curl<span class="token punctuation">-</span>custome<span class="token punctuation">-</span>sa<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token comment">#指定pod使用哪个serviceaccount</span>  <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> foo  <span class="token key atrule">containers</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> main    <span class="token key atrule">image</span><span class="token punctuation">:</span> tutum/curl    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">,</span><span class="token string">'9999999'</span><span class="token punctuation">]</span></code></pre><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig7.png" class=""> <p>可见，sa和pod已经互相绑定。pod会携带这个自定义的foo去和API Server交互。</p><h3 id="验证（攻击者视角）"><a href="#验证（攻击者视角）" class="headerlink" title="验证（攻击者视角）"></a>验证（攻击者视角）</h3><p>根据上面的生成过程，我们其实是创建了一个高权限的sa账户。一个pod的生成，默认情况下会将sa挂载到pod。接下来，将以攻击者的视角模拟利用高权限的sa和API Server交互的过程。</p><h4 id="获取高敏感的token"><a href="#获取高敏感的token" class="headerlink" title="获取高敏感的token"></a>获取高敏感的token</h4><p>攻击者拿下一个pod后，一般先会从环境变量中搜寻关于API Server的IP地址。此外，还会在&#x2F;var&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount&#x2F;token路径下获取token信息。</p><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig8.png" class=""> <h4 id="查看pod信息"><a href="#查看pod信息" class="headerlink" title="查看pod信息"></a>查看pod信息</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-H</span> <span class="token string">'Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLWprdzV2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJjYzczOTZjNC04MjhkLTExZWUtOTMyZS05MjEwNjIwYTgzNDkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.fwX8Uq6PIFPLW8Qlg9RLf_rHquGrxddMzGKcajYfROo6UFmFRgWANYlSxluGGSbzV8YpCq62Qd6e6KzfhkUomteie0fkRZRw6Z7R2GuSg4TS9awXQexqazhPTpFGKpY1OeTM-uYZzFXwpd0jIQyKdmDMcxLXODDmBrBL9LRy4i2Qhj364HZFyUZBsHFgYbpDK7GoK87MkFO_k2ZixrdbbJ6pT49fwuG0zbHByEwhYvlHWnaTue6pmIEp8uJ7J5IlobdyfEo0KcEe99Uyt4Dwce0wsR0e6sxGzq59T8cDYA7ZoYycrkTEstYoeNiJUDXxFL-pTlBSkzAneYlrF_T1aw'</span> https://10.192.0.2:6443/api/v1/pods</code></pre><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig9.png" class=""> <h4 id="创建pod"><a href="#创建pod" class="headerlink" title="创建pod"></a>创建pod</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-H</span> <span class="token string">"Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZWZhdWx0LXRva2VuLWprdzV2Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImRlZmF1bHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJjYzczOTZjNC04MjhkLTExZWUtOTMyZS05MjEwNjIwYTgzNDkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGVmYXVsdCJ9.fwX8Uq6PIFPLW8Qlg9RLf_rHquGrxddMzGKcajYfROo6UFmFRgWANYlSxluGGSbzV8YpCq62Qd6e6KzfhkUomteie0fkRZRw6Z7R2GuSg4TS9awXQexqazhPTpFGKpY1OeTM-uYZzFXwpd0jIQyKdmDMcxLXODDmBrBL9LRy4i2Qhj364HZFyUZBsHFgYbpDK7GoK87MkFO_k2ZixrdbbJ6pT49fwuG0zbHByEwhYvlHWnaTue6pmIEp8uJ7J5IlobdyfEo0KcEe99Uyt4Dwce0wsR0e6sxGzq59T8cDYA7ZoYycrkTEstYoeNiJUDXxFL-pTlBSkzAneYlrF_T1aw"</span> <span class="token parameter variable">-X</span> POST https://10.192.0.2:6443/api/v1/namespaces/default/pods <span class="token parameter variable">-d</span> <span class="token string">'&#123;     "apiVersion": "v1",     "kind": "Pod",     "metadata": &#123;          "annotations": &#123;               "kubectl.kubernetes.io/last-applied-configuration": "&#123;\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":&#123;\"annotations\": &#123;&#125;,\"name\":\"test\",\"namespace\":\"default\"&#125;,\"spec\":&#123;\"containers\": [&#123;\"image\":\"nginx\",\"name\":\"test\",\"volumeMounts\":[&#123;\"mountPath\":\"/host\",\"name\":\"host\"&#125;]&#125;],\"volumes\":[&#123;\"hostPath\": &#123;\"path\":\"/\",\"type\":\"Directory\"&#125;,\"name\":\"host\"&#125;]&#125;&#125;\n"          &#125;,          "name": "test",          "namespace": "default"     &#125;,     "spec": &#123;          "containers": [               &#123;                    "image": "nginx",                    "name": "test",                    "volumeMounts": [                         &#123;                              "mountPath": "/host",                              "name": "host"                         &#125;                    ]               &#125;          ],          "volumes": [               &#123;                    "hostPath": &#123;                         "path": "/",                         "type": "Directory"                    &#125;,                    "name": "host"               &#125;          ]     &#125;&#125;'</span></code></pre><img src="/2023/12/17/k8s-ji-qun-ren-zheng-he-shou-quan/fig10.png" class="">  <p><strong>注：</strong>这里pod没创建成功是网络问题，没能把镜像拉下来。但是通过token和API SERVER交互的指令是成功的。</p>]]></content>
      
      
      <categories>
          
          <category> 云原生安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO并发</title>
      <link href="/2023/12/17/go-bing-fa/"/>
      <url>/2023/12/17/go-bing-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang扫盲式学习——GO并发"><a href="#Golang扫盲式学习——GO并发" class="headerlink" title="Golang扫盲式学习——GO并发"></a>Golang扫盲式学习——GO并发</h1><h2 id="并发与并行😣"><a href="#并发与并行😣" class="headerlink" title="并发与并行😣"></a>并发与并行😣</h2><h3 id="并发与并行的概念和区别"><a href="#并发与并行的概念和区别" class="headerlink" title="并发与并行的概念和区别"></a>并发与并行的概念和区别</h3><p>并行：同一个时间段内多个任务同时在不同的CPU核心上执行。强调同一时刻多个任务之间的”<strong>同时执行</strong>“。</p><p>并发：同一个时间段内多个任务都在进展。强调多个任务间的”<strong>交替执行</strong>“。</p><img src="/2023/12/17/go-bing-fa/fig1.jpg" class="" title="并行与并发"><p>随着硬件水平的提高，现在的终端主机都是多个CPU，每个CPU都是多核结构。当多个CPU同时运行起来，跑不同的任务，这属于并行；在一个CPU里的多个核心里同时运行不同的任务，同样也属于并行。而并发是关注一个核心里的多个任务，这时需要交替执行，就是并发。</p><p>CPU是计算单元，有数据才能进行计算。当一个任务被网络I&#x2F;O阻塞，CPU没有数据，就会处于等待。显然，若是能够将等待的时间利用起来，资源利用率会提高。因此，并发处理的主要目的是提高CPU和资源的利用率。</p><h3 id="Go语言并发与CPU核心的关系"><a href="#Go语言并发与CPU核心的关系" class="headerlink" title="Go语言并发与CPU核心的关系"></a>Go语言并发与CPU核心的关系</h3><ul><li>Go并发是基于Goroutine和Channel实现的。</li></ul><p>Goroutine是Go语言的并发执行单元，Channel用于Goroutine之间的通信与同步。</p><ul><li>Goroutine的执行依赖于操作系统的线程调度。</li></ul><p>Goroutine自身不具备执行上下文，它必须依存在操作系统线程上才可以真正执行。当一个Goroutine被创建时，Go runtime会自动选择一个空闲的操作系统线程,将这个Goroutine的执行上下文绑定到该线程上。</p><img src="/2023/12/17/go-bing-fa/fig2.jpg" class="" title="GMP模型"><p>上图中G表示Goroutine，P表示一个调度的上下文（<strong>包含了运行 Goroutine 的资源</strong>），M表示一个OS线程。一个操作系统线程可以同时关联多个Goroutine，这些Goroutine会被Go runtime高效地在该线程上调度执行。但任意时刻只会有一个Goroutine获得线程的执行权进行运行（G0就是获得线程权的Goroutine）。当关联的操作系统线程终止时，绑定在该线程上的所有Goroutine也会被终止。</p><ul><li>在单核CPU上，即使有许多Goroutine，同一时刻也只能有一个Goroutine真正在CPU上运行。</li></ul><p>单核CPU同一时刻只能执行一个线程。即使有许多Goroutine，也只有获得CPU执行权的那个Goroutine在真正运行，其他Goroutine会被挂起,等待下次被调度执行。</p><ul><li>在多核CPU上，操作系统可以将不同的Goroutine直接调度到不同的CPU核心上运行。</li></ul><p>这样多个Goroutine就可以同时真正运行，实现并行执行。此时Go并发程序可以发挥多核CPU的强大计算能力。Go runtime会有智能的调度策略，将Goroutine均匀地分布在所有CPU核心上或者以负载均衡的方式进行调度，这取决于Goroutine的数量和系统的CPU核心数。</p><img src="/2023/12/17/go-bing-fa/fig3.png" class="" title="GMP模型2"><p>GMP模型如上图所示。图中涉及5个重要的实体。</p><ul><li>全局队列（run queue）：存放等待运行的Goroutine。</li><li>本地队列（local queue）：和P连接的队列，存放的也是等待运行的Goroutine，存放数量有限，一般不超过256个。新建Goroutine时，优先在本地队列存放，然后再放置全局队列。</li><li>P：被称为处理器，包含了运行 Goroutine 的资源。一个Goroutine想要运行，必须先获取P。P的数量是可配置的，最多有<code>GOMAXPROCS</code>个。</li><li>G：指代Goroutine，会被Go runtime智能化调度。当一个线程M空闲时，首先会从全局队列里获取Goroutine，若全局队列为空，则会从周边的线程”偷“一半Goroutine放到本地队列。</li><li>M：线程由OS调度器分配到CPU的核上执行。当一个线程阻塞时，会导致和该线程的其它Goroutine”饿死“。此时，Go runtime会解绑P和M，将一个新的M分配给P避免”饿死“情况发生。</li></ul><h3 id="Goroutine与OS线程的区别"><a href="#Goroutine与OS线程的区别" class="headerlink" title="Goroutine与OS线程的区别"></a>Goroutine与OS线程的区别</h3><ul><li>生命周期不同</li></ul><p>Goroutine由Go runtime 管理生命周期，创建和销毁由runtime调度完成。OS线程是由操作系统内核来管理生命周期。</p><ul><li>调度不同</li></ul><p>Goroutine由Go runtime的调度器进行调度。OS线程的调度是由操作系统内核根据时间片进行的。</p><ul><li>关联关系不同</li></ul><p>每个OS线程与一个Goroutine关联，但一个Goroutine不一定对应一个OS线程，多个Goroutine可能对应同一个OS线程。Go runtime会动态地将Goroutine映射到线程上。</p><ul><li>资源消耗不同</li></ul><p>创建和维护OS线程需要较多资源，而Goroutine的资源消耗很小。一个应用程序可以同时存在成千上万个Goroutine，但OS线程数目通常较小。</p><ul><li>通信方式不同</li></ul><p>Goroutine之间通信使用Channel，而OS线程通常使用共享内存来通信。</p><ul><li>并发数不同</li></ul><p>一个Go程序的并发度可以达到上百万，这是由于Goroutine的高效率实现。OS线程难以达到如此高的并发度。</p><h2 id="Goroutine🤔"><a href="#Goroutine🤔" class="headerlink" title="Goroutine🤔"></a>Goroutine🤔</h2><h3 id="Goroutine的概念与特点"><a href="#Goroutine的概念与特点" class="headerlink" title="Goroutine的概念与特点"></a>Goroutine的概念与特点</h3><p><strong>概念：</strong>Goroutine是一个轻量级的执行单元，用于执行并发任务。多个Goroutine可以在同一地址空间中执行，且Go runtime会管理其生命周期。Goroutine通过Channel进行通信。</p><p><strong>特点：</strong></p><ol><li>轻量级：创建和维护Goroutine的开销很小，一个程序可以同时存在成千上万个Goroutine。</li><li>并发执行：Goroutine允许程序利用多核CPU的优势进行并发执行。</li><li>自动调度：Goroutine的调度完全由Go运行时进行管理，开发者不需要关心底层细节。</li><li>资源共享：多个Goroutine可以访问共享的内存资源，这使得Goroutine之间可以高效地通信与协作。</li><li>无需回收：Goroutine不需要手动回收即可释放资源，运行时会自动回收结束的Goroutine。 </li><li>动态扩展：一个Go程序可以从几个Goroutine开始，然后动态地创建更多Goroutine来利用多核资源。</li><li>高并发：利用Goroutine可以轻易地编写高并发程序，一个服务器程序可以同时接待成千上万个客户端。</li><li>Channel通信：Goroutine之间可以通过Channel进行高效的消息通信与同步，这使得编写并发程序变得简单。</li></ol><h3 id="创建Goroutine的语法"><a href="#创建Goroutine的语法" class="headerlink" title="创建Goroutine的语法"></a>创建Goroutine的语法</h3><pre class="language-none"><code class="language-none">func()&#123;&#125;()：第一个func() &#123;...&#125; 定义了一个匿名函数(anonymous function)。第二个()代表调用这个匿名函数。</code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建一个Goroutine</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello from Goroutine!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 主Goroutine</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello from main!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Goroutine的调度与上下文切换"><a href="#Goroutine的调度与上下文切换" class="headerlink" title="Goroutine的调度与上下文切换"></a>Goroutine的调度与上下文切换</h3><p>为了让不同的Goroutine有机会运行，runtime会在Goroutine之间进行上下文切换。当一个Goroutine运行一定时间或遇到channel操作时，会主动交出线程的执行权，这时runtime会从其他挂起的Goroutine中选择一个继续运行。上下文切换涉及到保存当前运行Goroutine的程序计数器、堆栈指针等上下文信息，并恢复下一个要运行的Goroutine的上下文信息，这个过程需要一定的时间开销。</p><h3 id="Goroutine存在的内存问题及解决方案"><a href="#Goroutine存在的内存问题及解决方案" class="headerlink" title="Goroutine存在的内存问题及解决方案"></a>Goroutine存在的内存问题及解决方案</h3><p>存在的问题：</p><ul><li><p>栈溢出：每个Goroutine都有一个私有的栈，默认栈大小为2MB，如果函数调用太深会导致栈溢出。</p></li><li><p>堆溢出：如果Goroutine中分配过多的堆对象,也会导致内存溢出。</p></li><li><p>内存泄露：如果Goroutine退出时没有释放之前分配的内存,会导致这部分内存泄漏。</p></li></ul><p>解决方案：</p><ul><li>Goroutine栈大小</li></ul><p><strong>方法一：</strong>设置<code>runtime.GOMAXPROCS(n, stackSize)</code>，其中，n指定要使用的P的个数，设置为0表示使用所有CPU核心，stackSize指定新的默认Goroutine栈大小，单位为字节。</p><p><strong>方法二：</strong>创建Goroutine时，指定栈的大小。<code>go func(params) &#123; /* ... */ &#125;(stackSize, params)</code>，stackSize必须是第一个参数，在params之前指定。<font color = 'red'><strong>注意</strong></font>：stackSize的参数只在编译时起作用，用于指定Goroutine的栈大小，在被调用的函数内部，它无法访问这个参数。</p><ul><li>避免无限递归</li></ul><p>在Goroutine中调用无限递归函数会引起栈溢出,应该避免这种情况发生。</p><ul><li>设置垃圾回收阈值</li></ul><p>可以通过runtime.GOGC来设置垃圾回收器的阈值,触发更频繁的垃圾回收来避免堆溢出，例如<code>runtime.GOGC=200   </code>设置垃圾回收阈值为200。</p><ul><li>手动回收堆内存</li></ul><p>当一个Goroutine结束时，其私有栈内存会被收回，但堆内存不会自动回收。因此，需要在Goroutine结束前手动回收不再使用的堆内存，否在会发生内存泄露。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 分配一些堆空间</span>    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">// 使用buf...</span>  <span class="token comment">// Goroutine结束前手动回收buf</span>buf <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroupwg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// Goroutine结束 decrement WaitGroup计数</span>    <span class="token comment">// 分配内存并使用...</span>    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>     <span class="token comment">// 使用buf...</span>    buf <span class="token operator">=</span> <span class="token boolean">nil</span>        <span class="token comment">// 手动回收内存</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 等待Goroutine结束</span></code></pre><h2 id="Channel👍"><a href="#Channel👍" class="headerlink" title="Channel👍"></a>Channel👍</h2><h3 id="Channel的概念与特点"><a href="#Channel的概念与特点" class="headerlink" title="Channel的概念与特点"></a>Channel的概念与特点</h3><blockquote><p>Channels are not closed by default. They need to be closed explicitly with the <code>Close</code> method to indicate that no more values will be sent on the channel. </p></blockquote><p>Channel是一个通信机制，它可以使多个Goroutine之间相互发送数据。Channel允许任意两个Goroutine通过它异步地传递信息。</p><img src="/2023/12/17/go-bing-fa/fig4.png" class="" title="channel"><p><strong>特点：</strong></p><ul><li><p>方向性：Channel可以是双向的（default）或单向的（指定方向时）。单向Channel按发送&#x2F;接收方向分为发送（chan&lt;-）和接收（&lt;-chan）Channel。</p></li><li><p>类型安全：Channel在声明时需指定元素类型，之后只能传送该类型的元素。这保证了Channel通信的类型安全。</p></li><li><p>FIFO：Channel实现了先入先出的规则，发送的元素按顺序被接收。</p></li><li><p>阻塞：向一个满的Channel发送数据会导致发送方阻塞，从一个空的Channel接收数据会导致接收方阻塞。</p></li><li><p>缓冲：可以指定Channel的缓冲区大小，向一个未满的缓冲Channel发送数据不会阻塞。</p></li><li><p>关闭：关闭的Channel无法再发送数据，但可以继续从中接收数据。向关闭的Channel发送数据会panic。</p></li><li><p>无缓冲或满的Channel导致Goroutine阻塞，这可用于实现同步和协作。</p></li><li><p>Channel支持for range形式的接收，这会不断接收Channel的数据知道它被关闭。</p></li><li><p>Channel可用于函数间传递数据，实现异步执行的函数之间的数据通信。</p></li></ul><h3 id="无缓冲Channel与有缓冲Channel"><a href="#无缓冲Channel与有缓冲Channel" class="headerlink" title="无缓冲Channel与有缓冲Channel"></a>无缓冲Channel与有缓冲Channel</h3><ul><li>无缓冲Channel</li></ul><p><code>unbuffered channel</code> 就是缓冲大小为 0 的 <code>channel</code>，无缓冲区的 channel 本身是不存放数据的，在发送和接收都会被阻塞。也就是相当于，你现在是一个 <code>send</code> 身份，但是当另外一个没有 <code>receive</code> 你发送的值之前，你一直处于阻塞（等待接收）状态；就好比你递东西给别人，别人没接，你就要一直举着东西。相反，如果你现在是一个 <code>receive</code> 身份，你就会一直阻塞（等待发送）状态，在你拿到值之前，你会一直等待。就好比你准备要接东西，别人迟迟不给你，你就要一直等着。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>chfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"receive a struct: %v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"send a struct"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>有缓冲Channel</li><li><img src="/2023/12/17/go-bing-fa/fig5.jpg" class="" title="有缓冲的channel"></li></ul><p>有缓冲的Channel就是设置了一个buffersize，作为缓冲区的大小。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 设置buffersize大小为1</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"我关闭了"</span><span class="token punctuation">)</span>ch <span class="token operator">&lt;-</span> <span class="token number">1</span>ch <span class="token operator">&lt;-</span> <span class="token number">2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"send a struct"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"channel closed"</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"received a struct %v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// output</span>received a <span class="token keyword">struct</span> <span class="token number">1</span>received a <span class="token keyword">struct</span> <span class="token number">2</span>send a <span class="token keyword">struct</span>我关闭了channel closed</code></pre><p>创建Channel时，当size &#x3D;&#x3D;1时，相当于size&#x3D;&#x3D;0，表示创建一个无缓冲的通道。所以，当向通道传入一个1时，缓冲区就满了。此时，必须等接收端将1读走，才能继续向channel发送2。</p><p>将buffersize修改为2时，表示创建一个有缓冲的通道。发送者会一次性将1和2发送到通道里，然后就关闭Channel的写入端。睡眠5秒后，就由接收端将结果读出。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// output</span>send a <span class="token keyword">struct</span>我关闭了received a <span class="token keyword">struct</span> <span class="token number">1</span>received a <span class="token keyword">struct</span> <span class="token number">2</span>channel closed</code></pre><h3 id="应用：实现一个生产者消费者模型"><a href="#应用：实现一个生产者消费者模型" class="headerlink" title="应用：实现一个生产者消费者模型"></a>应用：实现一个生产者消费者模型</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span>out <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>out <span class="token operator">&lt;-</span> i  <span class="token comment">// 生产一个数据，发送到Channel</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"生产者："</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">consumer</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">&#123;</span>  <span class="token comment">// 从Channel中接收数据</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"消费者："</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment">// 消费数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建一个管道</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>  <span class="token comment">// 启动生产者Goroutine</span><span class="token keyword">go</span> <span class="token function">consumer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>  <span class="token comment">// 启动消费者Goroutine</span><span class="token keyword">go</span> <span class="token function">consumer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>  <span class="token comment">// 启动消费者Goroutine</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>  <span class="token comment">// 等待</span><span class="token punctuation">&#125;</span></code></pre><h2 id="Channel超时机制"><a href="#Channel超时机制" class="headerlink" title="Channel超时机制"></a>Channel超时机制</h2><h3 id="为什么需要Channel超时机制"><a href="#为什么需要Channel超时机制" class="headerlink" title="为什么需要Channel超时机制"></a>为什么需要Channel超时机制</h3><p>使用 select 可以实现 channel 超时,这可以解决以下问题:</p><ol><li>防止协程阻塞：如果只读取 channel，并且 channel 没有被关闭，协程会一直阻塞。使用超时可以防止协程无限阻塞。</li><li>实现重试：在超时后可以重新初始化 channel 读取，实现重试的效果。</li><li>限定操作时间：我们可以给定一个时间限制，如果在限定时间内通信未成功，则做默认操作。</li></ol><h3 id="select语句中的case语法"><a href="#select语句中的case语法" class="headerlink" title="select语句中的case语法"></a>select语句中的case语法</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token operator">&lt;</span>communication <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">></span>  <span class="token comment">// 执行当 communication 1 成功时 </span><span class="token keyword">case</span> <span class="token operator">&lt;</span>communication <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">></span>  <span class="token comment">// ...</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">></span>  <span class="token comment">// 默认执行的语句,当没有case可以继续时执行</span><span class="token punctuation">&#125;</span></code></pre><p>select 的一些规则:</p><ol><li><p>如果多个case同时满足，select会随机选择一个执行。</p></li><li><p>如果没有case满足，则会执行default分支。如果default也不存在，select将阻塞，直到某个通信操作成功。</p></li><li><p>必须有case和communication，不能一个空的select。 </p></li><li><p>每个case实际上是一个通信操作（channel接收&#x2F;发送），要求必须为channel。</p></li></ol><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>c2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    c1 <span class="token operator">&lt;-</span> <span class="token string">"one"</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    c2 <span class="token operator">&lt;-</span> <span class="token string">"two"</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> msg1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c1<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"received"</span><span class="token punctuation">,</span> msg1<span class="token punctuation">)</span>    <span class="token keyword">case</span> msg2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c2<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"received"</span><span class="token punctuation">,</span> msg2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="应用-select实现Channel超时"><a href="#应用-select实现Channel超时" class="headerlink" title="应用 select实现Channel超时"></a>应用 select实现Channel超时</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    retry <span class="token operator">:=</span> <span class="token number">3</span>          <span class="token comment">// 设置重试次数</span>    success <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>success<span class="token punctuation">:</span>   <span class="token comment">// 操作成功</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">// 超时后重试</span>        <span class="token keyword">if</span> retry <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            retry<span class="token operator">--</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"retry..."</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>         <span class="token punctuation">&#125;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timeout, exit"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </code></pre><p>这里我们实现了重试的逻辑，在 1 秒后会触发超时并重试，一直重试 3 次。如果 3 次后还是超时，则退出操作。</p><h2 id="timer和tickers"><a href="#timer和tickers" class="headerlink" title="timer和tickers"></a>timer和tickers</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>timer1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token operator">&lt;-</span>timer1<span class="token punctuation">.</span>Cfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer 1 fired"</span><span class="token punctuation">)</span>timer2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;-</span>timer2<span class="token punctuation">.</span>Cfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer 2 fired"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>stop2 <span class="token operator">:=</span> timer2<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> stop2 <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer 2 stopped"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>在代码中，我们首先创建了一个 <code>Timer</code> 对象 <code>timer1</code>，它将在 2 秒钟后触发。我们使用 <code>&lt;-timer1.C</code> 语法来等待 <code>timer1</code> 的触发事件，并在触发后输出一条消息。</p><p>接着，我们又创建了另一个 <code>Timer</code> 对象 <code>timer2</code>，它将在 1 秒钟后触发。不同的是，我们使用一个新的 goroutine 来等待 <code>timer2</code> 的触发事件，并在触发后输出一条消息。注意，在我们启动的 goroutine 中，我们使用了 <code>&lt;-timer2.C</code> 语法来等待 <code>timer2</code> 的触发事件。</p><p>然后，我们调用了 <code>timer2.Stop()</code> 方法来停止 <code>timer2</code> 的触发事件。由于我们在一个 goroutine 中等待 <code>timer2</code> 的触发事件，所以在调用 <code>Stop()</code> 方法后，我们需要判断 <code>timer2</code> 是否成功停止，并输出一条相应的提示信息。</p><p>最后，我们使用 <code>time.Sleep()</code> 函数来让程序休眠 5 秒钟，以等待所有定时器事件的完成。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">case</span> t <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Tick at"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1600</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>done <span class="token operator">&lt;-</span> <span class="token boolean">true</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Ticker stopped"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>在代码中，我们首先创建了一个 <code>Ticker</code> 对象 <code>ticker</code>，它将每隔 500 毫秒触发一次。我们使用 <code>&lt;-ticker.C</code> 语法来等待 <code>ticker</code> 的触发事件，并在触发后输出一条消息。</p><p>接着，我们启动了一个 goroutine，用于等待 <code>ticker</code> 的触发事件。在 goroutine 中，我们使用 <code>select</code> 语句来等待两个事件：<code>done</code> 事件和 <code>ticker.C</code> 事件。当接收到 <code>done</code> 事件时，我们就退出 goroutine，并结束 <code>Ticker</code> 的定时器事件。当接收到 <code>ticker.C</code> 事件时，我们就执行相应的操作，输出一条消息。</p><p>在主函数中，我们使用 <code>time.Sleep()</code> 函数让程序休眠 1.6 秒钟，以等待一些 <code>ticker.C</code> 事件的触发。然后，我们调用了 <code>ticker.Stop()</code> 方法来停止 <code>ticker</code> 的定时器事件，这将导致 <code>ticker.C</code> 事件的停止。接着，我们向 <code>done</code> 通道发送了一个值，以通知 goroutine 退出，并输出一条相应的提示信息。</p><h3 id="示例-一个基于超时的并发TCP服务器"><a href="#示例-一个基于超时的并发TCP服务器" class="headerlink" title="示例:一个基于超时的并发TCP服务器"></a>示例:一个基于超时的并发TCP服务器</h3><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">,</span> jobs <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> results <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> jobs <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"worker"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token string">"started  job"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"worker"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token string">"finished job"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>        results <span class="token operator">&lt;-</span> j <span class="token operator">*</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> numJobs <span class="token operator">=</span> <span class="token number">5</span>jobs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> numJobs<span class="token punctuation">)</span>results <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> numJobs<span class="token punctuation">)</span><span class="token keyword">for</span> w <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> w<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">go</span> <span class="token function">worker</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> jobs<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> numJobs<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    jobs <span class="token operator">&lt;-</span> j<span class="token punctuation">&#125;</span><span class="token function">close</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> numJobs<span class="token punctuation">;</span> a<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token operator">&lt;-</span>results<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这段代码演示了 Go 语言中的经典并发模式——工作池模式。</p><p>在代码中，我们定义了一个 <code>worker()</code> 函数，它将在一个 goroutine 中运行。<code>worker()</code> 函数接受两个通道参数：<code>jobs</code> 和 <code>results</code>。<code>jobs</code> 通道用于接收任务，<code>results</code> 通道用于发送任务结果。</p><p>在 <code>worker()</code> 函数中，我们使用 <code>range</code> 循环来遍历 <code>jobs</code> 通道中的所有任务。对于每个任务，我们输出一条消息表示当前 worker 开始执行任务，并在任务中使用 <code>time.Sleep()</code> 函数来模拟一些工作，然后再输出一条消息表示任务执行完成，并将任务结果发送到 <code>results</code> 通道中。</p><p>在主函数中，我们首先创建了两个通道：<code>jobs</code> 和 <code>results</code>。然后，我们启动了 3 个 goroutine 来执行 <code>worker()</code> 函数，并将它们的 <code>jobs</code> 和 <code>results</code> 通道绑定到相应的通道。</p><p>接着，我们将 5 个任务发送到 <code>jobs</code> 通道中，并在发送完毕后关闭 <code>jobs</code> 通道，以通知 worker 所有任务都已经发送完毕。</p><p>最后，我们从 <code>results</code> 通道中接收所有的任务结果，并输出相应的信息。由于 <code>results</code> 通道的缓冲区大小为 5，因此我们可以一次性接收所有的任务结果。</p>]]></content>
      
      
      <categories>
          
          <category> Go语言入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超实用的Go语言基础教程，让你快速上手！</title>
      <link href="/2023/12/17/chao-shi-yong-de-go-yu-yan-ji-chu-jiao-cheng-rang-ni-kuai-su-shang-shou/"/>
      <url>/2023/12/17/chao-shi-yong-de-go-yu-yan-ji-chu-jiao-cheng-rang-ni-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="超实用的Go语言基础教程，让你快速上手！"><a href="#超实用的Go语言基础教程，让你快速上手！" class="headerlink" title="超实用的Go语言基础教程，让你快速上手！"></a>超实用的Go语言基础教程，让你快速上手！</h1><h2 id="背景😎"><a href="#背景😎" class="headerlink" title="背景😎"></a>背景😎</h2><blockquote><p>工欲善其事，必先利其器。掌握Go的基础语法还不够，还需要勤加练习，修习“外功”，才能达到出奇制胜的效果。</p></blockquote><p>在大致了解Go语言的基本语法后，我就迫不得已地想使用这门语言。可是我发现编程思路不是问题，很大的问题是“手慢”，不熟悉常用写法（可能这就是快速过语法的缺点吧，脑子会了，手没会）φ(*￣0￣)。</p><p>在我看来，用Go语言刷算法题是一个非常好的练习“外功”的法门，可以帮助我提高思维的灵敏性和解决抽象化问题的能力。更重要地是复习我学习过的语法知识，不然真的很容易忘。虽然它和C语言有点像，但是我也并不经常使用C，两者不太好建立起清晰的关联图。因此，我会一边勤能补拙，一边总结一些语法知识，一边建立语言之间的联系，方便我加深记忆。</p><p>我刷的不是Leetcode形式的题目，而是ACM形式的题目。因为ACM形式需要处理输入输出，这对我的要求会更高点。</p><p>刷题平台：<a href="https://www.luogu.com.cn/">洛谷</a></p><h2 id="基础知识🤔"><a href="#基础知识🤔" class="headerlink" title="基础知识🤔"></a>基础知识🤔</h2><img src="/2023/12/17/chao-shi-yong-de-go-yu-yan-ji-chu-jiao-cheng-rang-ni-kuai-su-shang-shou/fig1.png" class="" title="Go语言基础语法大纲"><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><p>Go接收输入的方式有四类，分别是 fmt 包中的 Scan 、Scanf 和Scanln函数以及bufio.Scanner对象实现。</p><ul><li>Scan函数</li></ul><p><strong>使用场景</strong>：可以用于读取一段<font color="blue"><strong>空格分隔</strong></font>的字符串或多个数值类型的输入，例如读取数字或时间等；</p><p>示例一：计算浮点数相除的余。</p><p>输入格式：输入仅一行，包括两个双精度浮点数a和b。</p><p>输入样例：</p><pre class="language-none"><code class="language-none">13.55 24.88</code></pre><p>处理方式：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 接收两个双精度浮点数a,b</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token builtin">float64</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>Scanf函数</li></ul><p><strong>使用场景</strong>：适用于需要<font color="blue"><strong>按特定格式</strong></font>读取和处理输入数据的场景，例如读取时间、日期、金额等；</p><p>示例二：数字排序</p><p>输入格式：输入三个数字，数字之间用逗号隔开。</p><p>输入样例：</p><pre class="language-none"><code class="language-none">1,4,6</code></pre><p>处理方式：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><font color="red"><strong>如果输入不止三个数字，输入很长怎么办？</strong></font></p><p>我想到的是直接当字符串保存，然后用“，”分割每一个元素，获得一个字符串数组，最后利用Atoi函数将字符串转为整数，存储到一个新的int类型数组中。</p><p>具体做法如下：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token string">"strconv"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> input <span class="token builtin">string</span>scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span><span class="token keyword">if</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>strArray <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span>intArray <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 根据strArray的长度确定intArraye的长度</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> strArray <span class="token punctuation">&#123;</span><span class="token keyword">var</span> err <span class="token builtin">error</span>intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// strings.TrimSpace 函数去掉字符串中的多余空白字符</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The input integers are: %v\n"</span><span class="token punctuation">,</span> intArray<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>Scanln函数</li></ul><p><strong>使用场景</strong>：适用于<font color="blue"><strong>读取空格或换行</strong></font>分隔的字符串或多个数值类型的输入，例如读取单词或名称等。用法和Scan相似，就不举例子了。(～￣▽￣)～</p><ul><li>bufio.Scanner对象</li></ul><p><strong>使用场景</strong>：这个对象可以从标准输入中<font color="blue"><strong>逐行读取输入</strong></font>，直到遇到文件结尾或输入流关闭为止。特别适合循环读入数据！</p><p>示例三：字符串读取，并打印</p><p>输入格式：输入多行英文句子。</p><p>输入样例：</p><pre class="language-none"><code class="language-none">wow!you are pretty good at printing!you win.</code></pre><p>处理方式：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> strArray <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span><span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>input <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> input <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>strArray <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>strArray<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error reading standard input: %s\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>​    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Read %d lines:\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">)</span>​    <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> strArray <span class="token punctuation">&#123;</span>​    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d: %s\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>​    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><p>Go处理输出的方式根据场景的不同，可以分为以下几种：</p><ul><li><font color="blue"><strong>终端或控制台中输出一些信息</strong></font>，使用fmt包中的函数。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>name <span class="token operator">:=</span> <span class="token string">"Tom"</span>age <span class="token operator">:=</span> <span class="token number">18</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"age:"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// Println()函数会自动添加空格</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name: %s age: %d\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>str1 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name: %s age: %d\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// Sprintf()函数会返回一个字符串</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li><font color="blue"><strong>记录程序运行过程中的日志信息</strong></font>时，可以使用log包中的函数。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Starting the application..."</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Terminating the application..."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li><font color="blue"><strong>读写文件或网络连接</strong></font>时，可以使用os包中的函数。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment">// read 1024 bytes at a time</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>bytesRead<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token comment">// read bytes from file</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bytes read: "</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bytes:"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">[</span><span class="token punctuation">:</span>bytesRead<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> bytesRead <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"File contents: %s"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token comment">// print file contents</span><span class="token punctuation">&#125;</span></code></pre><ul><li><font color="blue"><strong>执行系统命令或创建进程</strong></font>时，可以使用os包中的函数。</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"os"</span><span class="token string">"os/exec"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span>cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdoutcmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> os<span class="token punctuation">.</span>Stderrerr <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>ACM形式的题目更多考察的是第一种在终端&#x2F;控制台输出信息的格式。这个就要涉及到Go语言格式化字符串的方式的知识点。在我看来，格式化字符串在每种语言里都享有很高的地位。毕竟更美观的打印数据，也有助于我们更好的理解信息。</p><ul><li><font color="blue"><strong>格式化字符串</strong></font></li></ul><table><thead><tr><th align="left">格式</th><th>描述</th></tr></thead><tbody><tr><td align="left">%v</td><td>表示按照值的默认格式输出，可以输出任意类型的数据。</td></tr><tr><td align="left">%s</td><td>表示输出字符串类型的数据。</td></tr><tr><td align="left">%d</td><td>表示输出十进制整数类型的数据。</td></tr><tr><td align="left">%f</td><td>表示输出浮点数类型的数据。</td></tr><tr><td align="left">%t</td><td>表示输出布尔类型的数据，true和false分别对应输出1和0。</td></tr><tr><td align="left">%p</td><td>表示输出指针类型的数据。</td></tr><tr><td align="left">%c</td><td>表示输出字符类型的数据。</td></tr><tr><td align="left">%q</td><td>表示输出带引号的字符串类型的数据。</td></tr><tr><td align="left">%b</td><td>表示输出二进制数类型的数据。</td></tr><tr><td align="left">%x</td><td>表示输出十六进制数类型的数据。</td></tr><tr><td align="left">%o</td><td>表示输出八进制数类型的数据。</td></tr><tr><td align="left">%05d</td><td>表示输出5位，不足的位数用0补齐。</td></tr><tr><td align="left">%.2f</td><td>表示输出小数点后两位。</td></tr><tr><td align="left">%10s</td><td>输出10个字符长度，不足的位数用空格补齐</td></tr></tbody></table><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> <span class="token string">"Tom"</span>    age <span class="token operator">:=</span> <span class="token number">18</span>    height <span class="token operator">:=</span> <span class="token number">1.75</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"My name is %s, I'm %d years old, and I'm %.2f meters tall.\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"My name is %10s, I'm %05d years old, and I'm %.2f meters tall.\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-none"><code class="language-none">My name is Tom, I&#39;m 18 years old, and I&#39;m 1.75 meters tall.My name is        Tom, I&#39;m 00018 years old, and I&#39;m 1.75 meters tall.</code></pre><h3 id="数组？切片？"><a href="#数组？切片？" class="headerlink" title="数组？切片？"></a>数组？切片？</h3><p>在Go语言中，数组是一种<font color="red"><strong>固定长度</strong></font>的数据结构，一旦定义了数组的长度，就无法再向数组中添加新的元素。如果想动态更改，可以考虑使用切片。根据使用方法可以大致分个类：</p><table><thead><tr><th>共性</th><th>差异</th></tr></thead><tbody><tr><td>下标访问</td><td>定义方式不同</td></tr><tr><td>循环遍历</td><td>切片可以添加&#x2F;删除元素</td></tr><tr><td>长度计算</td><td></td></tr><tr><td>切片[start:end]</td><td></td></tr></tbody></table><ul><li>题号：<a href="https://www.luogu.com.cn/problem/B2094">B2094 不与最大数相同的数字之和</a></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> max <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000000</span><span class="token keyword">var</span> sum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> x <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>sum <span class="token operator">+=</span> x<span class="token keyword">if</span> max <span class="token operator">&lt;</span> x <span class="token punctuation">&#123;</span>max <span class="token operator">=</span> x<span class="token punctuation">&#125;</span>arr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> count <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">// 找到数组里面最大的数及它出现的次数</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> max <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> max<span class="token operator">*</span>count<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><ul><li>题号：<a href="https://www.luogu.com.cn/problem/B2098">B2098 整数去重</a></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token keyword">var</span> used <span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> x <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span>used<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token keyword">if</span> used<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><ul><li>字符串长度计算</li></ul><p>在Go语言中，字符串的长度是指字符串中字节的个数，而不是字符的个数。对于包含非ASCII字符的字符串，一个字符可能会占用多个字节。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str <span class="token operator">:=</span> <span class="token string">"hello world"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出11</span>str <span class="token operator">=</span> <span class="token string">"hello 世界"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出12</span><span class="token punctuation">&#125;</span></code></pre><ul><li>字符串遍历</li></ul><p>既可以使用传统的下标遍历，也可以使用range遍历。建议使用range遍历，因为当字符串中出现中文时，下标遍历获取的是byte类型的值，也就意味着它是将一个汉字拆成了3个byte类型字节分别输出。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str <span class="token operator">:=</span> <span class="token string">"hello world"</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"字符串中下标为 %d 的字符是 %c\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>字符串切片</li></ul><p>需要注意的是，在使用字符串切片时，下标是<font color="red"><strong>按字节计算的，而不是按字符</strong></font>计算的。</p><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"hello world"</span>slice <span class="token operator">:=</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment">// 获取str中下标为1到4的字符，不包括下标为5的字符</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>  <span class="token comment">// 输出"ello"</span></code></pre><ul><li>字符串连接</li></ul><p>可以使用加号运算符或fmt.Sprintf函数来连接字符串。</p><pre class="language-go" data-language="go"><code class="language-go">str1 <span class="token operator">:=</span> <span class="token string">"hello"</span>str2 <span class="token operator">:=</span> <span class="token string">"world"</span>str3 <span class="token operator">:=</span> str1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str2  <span class="token comment">// 使用加号运算符连接字符串</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span>  <span class="token comment">// 输出"hello world"</span>str4 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span>  <span class="token comment">// 使用fmt.Sprintf函数连接字符串</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span>  <span class="token comment">// 输出"hello world"</span></code></pre><ul><li>字符串查找</li></ul><p>使用strings包中的函数来查找字符串中的子串。</p><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"hello world"</span>index <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>  <span class="token comment">// 查找子串"world"在str中的位置</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token comment">// 输出6</span></code></pre><ul><li>字符串替换</li></ul><p>使用strings包中的函数来替换字符串中的子串。</p><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"hello world"</span>newstr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"golang"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 将子串"world"替换为"golang", -1表示全部替换</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span>                                   <span class="token comment">// 输出"hello golang"</span></code></pre><ul><li>字符串转换</li></ul><p>使用strconv包中的函数进行转换。</p><pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">:=</span> <span class="token string">"123"</span>num<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// 将字符串转换为整型</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"转换失败"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"转换结果是 %T\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>num <span class="token operator">=</span> <span class="token number">123</span>str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 将整型转换为字符串</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"转换结果是 %T\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span></code></pre><ul><li>正则匹配（✨✨✨✨）</li></ul><table><thead><tr><th>预定义字符集</th><th>描述</th></tr></thead><tbody><tr><td>\d</td><td>匹配一个数字字符。等价于字符集 [0-9]。</td></tr><tr><td>\s</td><td>匹配一个空白字符（空格、制表符、换行符等）。等价于字符集 [ \t\n\r\f\v]。</td></tr><tr><td>\w</td><td>匹配一个单词字符。等价于字符集 [a-zA-Z0-9_]。</td></tr><tr><td>\W</td><td>匹配一个非单词字符。等价于字符集 [^a-zA-Z0-9_]。</td></tr><tr><td>\S</td><td>匹配一个非空白字符。等价于字符集 [^ \t\n\r\f\v]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于字符集 [^0-9]。</td></tr><tr><td>\b</td><td>表示单词边界，我的理解是能准确匹配到某个单词，不把包含这个单词的前缀词算在内。比如gotest就无法匹配test。</td></tr></tbody></table><p>匹配一个由汉字组成的字符串（数据清洗时常用！）：</p><pre class="language-none"><code class="language-none">^[\u4e00-\u9fa5]+$</code></pre><p>匹配一个由邮箱地址组成的字符串（匹配恶意URL、匹配钓鱼邮箱常用）：</p><pre class="language-none"><code class="language-none">^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></pre><p><strong>演示1</strong>：匹配一个字符串是否符合某个正则表达式。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"regexp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 定义一个正则表达式</span>pattern <span class="token operator">:=</span> <span class="token string">"^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"</span><span class="token comment">// 编译正则表达式</span>reg <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token comment">// 要匹配的字符串</span>str <span class="token operator">:=</span> <span class="token string">"abc123@11-2.com"</span><span class="token comment">// 判断字符串是否匹配</span>matched <span class="token operator">:=</span> reg<span class="token punctuation">.</span><span class="token function">MatchString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><strong>演示2</strong>：利用正则进行查找和替换字符串</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 查找</span>str <span class="token operator">:=</span> <span class="token string">"hello world"</span>re <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`\b\w+o\w+\b`</span><span class="token punctuation">)</span> <span class="token comment">// 匹配包含字母o的单词</span>newstr <span class="token operator">:=</span> re<span class="token punctuation">.</span><span class="token function">FindAllString</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">// 将查找所有匹配的字符串</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span><span class="token comment">// 替换</span>str <span class="token operator">:=</span> <span class="token string">"hello world"</span>re <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">`\b\w+o\w+\b`</span><span class="token punctuation">)</span>  <span class="token comment">// 匹配包含字母o的单词</span>newstr <span class="token operator">:=</span> re<span class="token punctuation">.</span><span class="token function">ReplaceAllString</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"golang"</span><span class="token punctuation">)</span>  <span class="token comment">// 将所有匹配的字符串替换为"golang"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>newstr<span class="token punctuation">)</span>  <span class="token comment">// 输出"golang golang"</span></code></pre><ul><li><p>题号：<a href="https://www.luogu.com.cn/problem/B2109">B2109 统计数字字符个数</a></p></li><li><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sentence <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> count <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> sentence <span class="token punctuation">&#123;</span><span class="token keyword">if</span> v <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Go语言的结构体和C语言很相似。</p><ul><li>结构体定义</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name <span class="token builtin">string</span>    Age <span class="token builtin">int</span>    Height <span class="token builtin">float32</span><span class="token punctuation">&#125;</span></code></pre><ul><li>结构体初始化</li></ul><pre class="language-go" data-language="go"><code class="language-go">p1 <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> Height<span class="token punctuation">:</span> <span class="token number">1.65</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 定义一个Person类型的结构体变量p1并初始化</span>p2 <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>  <span class="token comment">// 定义一个指向Person类型的指针变量p2，并分配内存空间</span></code></pre><ul><li>结构体元素访问（”.”号访问）</li></ul><p>指针和普通的对象类型都是使用“.”号访问。</p><pre class="language-go" data-language="go"><code class="language-go">p1<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"Alice"</span>  <span class="token comment">// 给p1的Name赋值为"Alice"</span>p1<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment">// 给p1的Age赋值为20</span>p1<span class="token punctuation">.</span>Height <span class="token operator">=</span> <span class="token number">1.65</span>  <span class="token comment">// 给p1的Height赋值为1.65</span></code></pre><p>分界线：————————————————————————————————————————————————————</p><p>Go还支持一些面向对象的编程特性，非常的灵活和强大！！！</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"Name: %s, Age: %d, Height: %.2f"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Age<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>p1<span class="token punctuation">.</span><span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 调用p1的GetInfo方法，返回"Name: Alice, Age: 20, Height: 1.65"</span></code></pre><p>这个方法定义了一个<font color="red"><strong>指针类型为Person的方法GetInfo</strong></font>，用来返回一个包含Person对象信息的字符串。我们可以通过调用结构体变量的方法来实现对结构体对象的操作。这种使用方法就很棒！这就有点像类方法，GetInfo函数就是Person结构体的类方法。想要使用这个方法，那么就需要先构造一个Person的结构体对象，然后通过对象调用。</p><p>此外，Go还支持封装、继承、多态的特性，用来实现复杂的对象模型和数据结构。</p><ul><li>封装</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">SetName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></code></pre><p>这个结构体定义了一个名为Person的结构体类型，包含了<font color="red"><strong>两个私有的成员变量name和age</strong></font>，以及两个公有的方法SetName和GetName，用来设置和获取name成员变量的值。不同于其它语言使用Public，Private定义公有和私有，Go使用编程规范来定义这个概念。<strong>变量名首字母大写代表公有，对外可见；变量名首字母小写代表私有，对外不可见。</strong>（经过实验，上面的说法是有一个大前提的。<font color="red"><strong>同一个包内，无论是公有变量还是私有变量，在任何地方都可以访问！！！！</strong></font>，只有在<strong>不同的包</strong>里，才有上面变量名大小写来控制可见性的说法。😣😣😣）Go的变量命名主要使用驼峰命名法，也算是约定俗成吧。</p><ul><li>继承和组合</li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Person  <span class="token comment">// 匿名嵌套Person结构体</span>    id <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">SetId</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">&#125;</span></code></pre><p>这个结构体定义了一个名为Student的结构体类型，通过匿名嵌套Person结构体，实现了从Person结构体继承了name和age成员变量和方法，并添加了一个id成员变量和SetId方法。这样，我们就可以通过Student结构体来访问和操作Person结构体的成员变量和方法。<strong>匿名嵌套是继承，不匿名就是组合的使用方法了。</strong></p><ul><li>接口多态</li></ul><p>声明一个Shape类型的接口，该接口里定义了Area()函数。Rectangle和Circle实现了Shape类型接口里的Area()的方法，可以认定为是一个实现类。PrintArea方法接受一个Shape类型的数据，然后输出面积。这个形参是Shape类型，因此，就有了一个“<strong>向上转型</strong>”的效果。</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Shape <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Rectangle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Width  <span class="token builtin">float64</span>Height <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r Rectangle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>Width <span class="token operator">*</span> r<span class="token punctuation">.</span>Height<span class="token punctuation">&#125;</span><span class="token keyword">type</span> Circle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Radius <span class="token builtin">float64</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c Circle<span class="token punctuation">)</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> c<span class="token punctuation">.</span>Radius <span class="token operator">*</span> c<span class="token punctuation">.</span>Radius<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">PrintArea</span><span class="token punctuation">(</span>s Shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r <span class="token operator">:=</span> Rectangle<span class="token punctuation">&#123;</span>Width<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> Height<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>c <span class="token operator">:=</span> Circle<span class="token punctuation">&#123;</span>Radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>  <span class="token function">PrintArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// 输出 12</span><span class="token function">PrintArea</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// 输出 78.53981633974483</span><span class="token punctuation">&#125;</span></code></pre><ul><li>题号：<a href="https://www.luogu.com.cn/problem/B3679">B3679 [语言月赛202211] Zone Selection</a></li></ul><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">type</span> coordinate <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y     <span class="token builtin">int</span>isMarked <span class="token builtin">bool</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">distence</span><span class="token punctuation">(</span>x1 <span class="token builtin">int</span><span class="token punctuation">,</span> y1 <span class="token builtin">int</span><span class="token punctuation">,</span> x2 <span class="token builtin">int</span><span class="token punctuation">,</span> y2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>coordinates <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>coordinate<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>coordinates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>coordinates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> x<span class="token punctuation">,</span> y <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> x <span class="token operator">==</span> coordinates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> coordinates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">&#123;</span>coordinates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>isMarked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 记录最远距离的坐标，以及最远距离</span><span class="token keyword">var</span> maxDistence <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token keyword">var</span> maxDistenceid <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">var</span> res <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> x<span class="token punctuation">,</span> y <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token function">distence</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> coordinates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> coordinates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">></span> maxDistence <span class="token punctuation">&#123;</span><span class="token comment">// fmt.Println(x, y, coordinates[j].x, coordinates[j].y)</span><span class="token comment">// fmt.Println("distence:", distence(x, y, coordinates[j].x, coordinates[j].y))</span>maxDistence <span class="token operator">=</span> <span class="token function">distence</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> coordinates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> coordinates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>maxDistenceid <span class="token operator">=</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> coordinates<span class="token punctuation">[</span>maxDistenceid<span class="token punctuation">]</span><span class="token punctuation">.</span>isMarked <span class="token punctuation">&#123;</span>res<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token comment">// 更新最远距离</span>maxDistence <span class="token operator">=</span> <span class="token number">0.0</span>maxDistenceid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go语言入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
