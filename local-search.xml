<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>超实用的Go语言基础教程，让你快速上手！</title>
    <link href="/2023/05/12/Go1-1/"/>
    <url>/2023/05/12/Go1-1/</url>
    
    <content type="html"><![CDATA[<h1 id="超实用的Go语言基础教程，让你快速上手！"><a href="#超实用的Go语言基础教程，让你快速上手！" class="headerlink" title="超实用的Go语言基础教程，让你快速上手！"></a>超实用的Go语言基础教程，让你快速上手！</h1><h2 id="背景😎"><a href="#背景😎" class="headerlink" title="背景😎"></a>背景😎</h2><blockquote><p>工欲善其事，必先利其器。掌握Go的基础语法还不够，还需要勤加练习，修习“外功”，才能达到出奇制胜的效果。</p></blockquote><p>在大致了解Go语言的基本语法后，我就迫不得已地想使用这门语言。可是我发现编程思路不是问题，很大的问题是“手慢”，不熟悉常用写法（可能这就是快速过语法的缺点吧，脑子会了，手没会）φ(*￣0￣)。</p><p>在我看来，用Go语言刷算法题是一个非常好的练习“外功”的法门，可以帮助我提高思维的灵敏性和解决抽象化问题的能力。更重要地是复习我学习过的语法知识，不然真的很容易忘。虽然它和C语言有点像，但是我也并不经常使用C，两者不太好建立起清晰的关联图。因此，我会一边勤能补拙，一边总结一些语法知识，一边建立语言之间的联系，方便我加深记忆。</p><p>我刷的不是Leetcode形式的题目，而是ACM形式的题目。因为ACM形式需要处理输入输出，这对我的要求会更高点。</p><p>刷题平台：<a href="https://www.luogu.com.cn/">洛谷</a></p><h2 id="基础知识🤔"><a href="#基础知识🤔" class="headerlink" title="基础知识🤔"></a>基础知识🤔</h2><p><img src="/fig1.png" alt="Go语言基础语法"></p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><p>Go接收输入的方式有四类，分别是 fmt 包中的 Scan 、Scanf 和Scanln函数以及bufio.Scanner对象实现。</p><ul><li>Scan函数</li></ul><p><strong>使用场景</strong>：可以用于读取一段<font color="blue"><strong>空格分隔</strong></font>的字符串或多个数值类型的输入，例如读取数字或时间等；</p><p>示例一：计算浮点数相除的余。</p><p>输入格式：输入仅一行，包括两个双精度浮点数a和b。</p><p>输入样例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">13</span>.<span class="hljs-number">55</span> <span class="hljs-number">24</span>.<span class="hljs-number">88</span><br></code></pre></td></tr></table></figure><p>处理方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 接收两个双精度浮点数a,b</span><br><span class="hljs-keyword">var</span> a, b <span class="hljs-type">float64</span><br>_, err := fmt.Scan(&amp;a, &amp;b)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Scanf函数</li></ul><p><strong>使用场景</strong>：适用于需要<font color="blue"><strong>按特定格式</strong></font>读取和处理输入数据的场景，例如读取时间、日期、金额等；</p><p>示例二：数字排序</p><p>输入格式：输入三个数字，数字之间用逗号隔开。</p><p>输入样例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>处理方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a, b, c <span class="hljs-type">int</span><br>fmt.Scanf(<span class="hljs-string">&quot;%d,%d,%d&quot;</span>, &amp;a, &amp;b, &amp;c)<br>fmt.Println(a, b, c)<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="red"><strong>如果输入不止三个数字，输入很长怎么办？</strong></font></p><p>我想到的是直接当字符串保存，然后用“，”分割每一个元素，获得一个字符串数组，最后利用Atoi函数将字符串转为整数，存储到一个新的int类型数组中。</p><p>具体做法如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">input</span> string<br>scanner := bufio<span class="hljs-selector-class">.NewScanner</span>(os.Stdin)<br><span class="hljs-keyword">if</span> scanner<span class="hljs-selector-class">.Scan</span>() &#123;<br><span class="hljs-selector-tag">input</span> = scanner<span class="hljs-selector-class">.Text</span>()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Error&quot;</span>)<br>&#125;<br>strArray := strings<span class="hljs-selector-class">.Split</span>(<span class="hljs-selector-tag">input</span>, <span class="hljs-string">&quot;,&quot;</span>)<br>intArray := <span class="hljs-built_in">make</span>(<span class="hljs-selector-attr">[]</span>int, <span class="hljs-built_in">len</span>(strArray))  <span class="hljs-comment">// 根据strArray的长度确定intArraye的长度</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span>, v := range strArray &#123;<br><span class="hljs-selector-tag">var</span> err error<br>intArray<span class="hljs-selector-attr">[i]</span>, err = strconv<span class="hljs-selector-class">.Atoi</span>(strings<span class="hljs-selector-class">.TrimSpace</span>(v))  <span class="hljs-comment">// strings.TrimSpace 函数去掉字符串中的多余空白字符</span><br><span class="hljs-keyword">if</span> err != nil &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Error&quot;</span>)<br>&#125;<br>&#125;<br>fmt<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;The input integers are: %v\n&quot;</span>, intArray)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Scanln函数</li></ul><p><strong>使用场景</strong>：适用于<font color="blue"><strong>读取空格或换行</strong></font>分隔的字符串或多个数值类型的输入，例如读取单词或名称等。用法和Scan相似，就不举例子了。(～￣▽￣)～</p><ul><li>bufio.Scanner对象</li></ul><p><strong>使用场景</strong>：这个对象可以从标准输入中<font color="blue"><strong>逐行读取输入</strong></font>，直到遇到文件结尾或输入流关闭为止。特别适合循环读入数据！</p><p>示例三：字符串读取，并打印</p><p>输入格式：输入多行英文句子。</p><p>输入样例：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">wow!<br>you are pretty good at printing!<br>you win.<br></code></pre></td></tr></table></figure><p>处理方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> strArray []<span class="hljs-type">string</span><br>scanner := bufio.NewScanner(os.Stdin)<br><span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>input := scanner.Text()<br><span class="hljs-keyword">if</span> input == <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>strArray = <span class="hljs-built_in">append</span>(strArray, input)<br>&#125;<br><span class="hljs-keyword">if</span> err := scanner.Err(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Error reading standard input: %s\n&quot;</span>, err.Error())<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;Read %d lines:\n&quot;</span>, <span class="hljs-built_in">len</span>(strArray))<br><span class="hljs-keyword">for</span> i, line := <span class="hljs-keyword">range</span> strArray &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d: %s\n&quot;</span>, i+<span class="hljs-number">1</span>, line)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><p>Go处理输出的方式根据场景的不同，可以分为以下几种：</p><ul><li><font color="blue"><strong>终端或控制台中输出一些信息</strong></font>，使用fmt包中的函数。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>name := <span class="hljs-string">&quot;Tom&quot;</span><br>age := <span class="hljs-number">18</span><br>fmt.Println(<span class="hljs-string">&quot;name:&quot;</span>, name, <span class="hljs-string">&quot;age:&quot;</span>, age) <span class="hljs-comment">// Println()函数会自动添加空格</span><br>fmt.Printf(<span class="hljs-string">&quot;name: %s age: %d\n&quot;</span>, name, age)<br>str1 := fmt.Sprintf(<span class="hljs-string">&quot;name: %s age: %d\n&quot;</span>, name, age) <span class="hljs-comment">// Sprintf()函数会返回一个字符串</span><br>fmt.Printf(str1)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><font color="blue"><strong>记录程序运行过程中的日志信息</strong></font>时，可以使用log包中的函数。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>log.Println(<span class="hljs-string">&quot;Starting the application...&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br>log.Println(<span class="hljs-string">&quot;Terminating the application...&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><font color="blue"><strong>读写文件或网络连接</strong></font>时，可以使用os包中的函数。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stata">package main<br><br>import (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br>func main() &#123;<br><span class="hljs-keyword">file</span>, <span class="hljs-keyword">err</span> := os.<span class="hljs-keyword">Open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> != nil &#123;<br><span class="hljs-keyword">log</span>.Fatal(<span class="hljs-keyword">err</span>)<br>&#125;<br>defer <span class="hljs-keyword">file</span>.<span class="hljs-keyword">Close</span>()<br><br>buffer := make([]byte, 1024) <span class="hljs-comment">// read 1024 bytes at a time</span><br><span class="hljs-keyword">for</span> &#123;<br>bytesRead, <span class="hljs-keyword">err</span> := <span class="hljs-keyword">file</span>.<span class="hljs-keyword">Read</span>(buffer) <span class="hljs-comment">// read bytes from file</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> != nil &#123;<br><span class="hljs-keyword">log</span>.Fatal(<span class="hljs-keyword">err</span>)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;bytes read: &quot;</span>, bytesRead)<br>fmt.Println(<span class="hljs-string">&quot;bytes:&quot;</span>, buffer[:bytesRead])<br><span class="hljs-keyword">if</span> bytesRead &lt; 1024 &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;File contents: %s&quot;</span>, buffer) <span class="hljs-comment">// print file contents</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><font color="blue"><strong>执行系统命令或创建进程</strong></font>时，可以使用os包中的函数。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/exec&quot;</span><br>)<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>cmd := exec<span class="hljs-selector-class">.Command</span>(<span class="hljs-string">&quot;whoami&quot;</span>)<br>cmd<span class="hljs-selector-class">.Stdout</span> = os<span class="hljs-selector-class">.Stdout</span><br>cmd<span class="hljs-selector-class">.Stderr</span> = os<span class="hljs-selector-class">.Stderr</span><br>err := cmd<span class="hljs-selector-class">.Run</span>()<br><span class="hljs-keyword">if</span> err != nil &#123;<br>log<span class="hljs-selector-class">.Fatal</span>(err)<br>&#125;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>ACM形式的题目更多考察的是第一种在终端&#x2F;控制台输出信息的格式。这个就要涉及到Go语言格式化字符串的方式的知识点。在我看来，格式化字符串在每种语言里都享有很高的地位。毕竟更美观的打印数据，也有助于我们更好的理解信息。</p><ul><li><font color="blue"><strong>格式化字符串</strong></font></li></ul><table><thead><tr><th align="left">格式</th><th>描述</th></tr></thead><tbody><tr><td align="left">%v</td><td>表示按照值的默认格式输出，可以输出任意类型的数据。</td></tr><tr><td align="left">%s</td><td>表示输出字符串类型的数据。</td></tr><tr><td align="left">%d</td><td>表示输出十进制整数类型的数据。</td></tr><tr><td align="left">%f</td><td>表示输出浮点数类型的数据。</td></tr><tr><td align="left">%t</td><td>表示输出布尔类型的数据，true和false分别对应输出1和0。</td></tr><tr><td align="left">%p</td><td>表示输出指针类型的数据。</td></tr><tr><td align="left">%c</td><td>表示输出字符类型的数据。</td></tr><tr><td align="left">%q</td><td>表示输出带引号的字符串类型的数据。</td></tr><tr><td align="left">%b</td><td>表示输出二进制数类型的数据。</td></tr><tr><td align="left">%x</td><td>表示输出十六进制数类型的数据。</td></tr><tr><td align="left">%o</td><td>表示输出八进制数类型的数据。</td></tr><tr><td align="left">%05d</td><td>表示输出5位，不足的位数用0补齐。</td></tr><tr><td align="left">%.2f</td><td>表示输出小数点后两位。</td></tr><tr><td align="left">%10s</td><td>输出10个字符长度，不足的位数用空格补齐</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    name := <span class="hljs-string">&quot;Tom&quot;</span><br>    age := <span class="hljs-number">18</span><br>    height := <span class="hljs-number">1.75</span><br><br>    fmt.Printf(<span class="hljs-string">&quot;My name is %s, I&#x27;m %d years old, and I&#x27;m %.2f meters tall.\n&quot;</span>, name, age, height)<br>    fmt.Printf(<span class="hljs-string">&quot;My name is %10s, I&#x27;m %05d years old, and I&#x27;m %.2f meters tall.\n&quot;</span>, name, age, height)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">My name <span class="hljs-keyword">is</span> Tom, I<span class="hljs-symbol">&#x27;m</span> <span class="hljs-number">18</span> years old, <span class="hljs-keyword">and</span> I<span class="hljs-symbol">&#x27;m</span> <span class="hljs-number">1.75</span> meters tall.<br>My name <span class="hljs-keyword">is</span>        Tom, I<span class="hljs-symbol">&#x27;m</span> <span class="hljs-number">00018</span> years old, <span class="hljs-keyword">and</span> I<span class="hljs-symbol">&#x27;m</span> <span class="hljs-number">1.75</span> meters tall.<br></code></pre></td></tr></table></figure><h3 id="数组？切片？"><a href="#数组？切片？" class="headerlink" title="数组？切片？"></a>数组？切片？</h3><p>在Go语言中，数组是一种<font color="red"><strong>固定长度</strong></font>的数据结构，一旦定义了数组的长度，就无法再向数组中添加新的元素。如果想动态更改，可以考虑使用切片。根据使用方法可以大致分个类：</p><table><thead><tr><th>共性</th><th>差异</th></tr></thead><tbody><tr><td>下标访问</td><td>定义方式不同</td></tr><tr><td>循环遍历</td><td>切片可以添加&#x2F;删除元素</td></tr><tr><td>长度计算</td><td></td></tr><tr><td>切片[start:end]</td><td></td></tr></tbody></table><ul><li>题号：<a href="https://www.luogu.com.cn/problem/B2094">B2094 不与最大数相同的数字之和</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br>fmt.Scan(&amp;n)<br><span class="hljs-keyword">var</span> arr []<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> max <span class="hljs-type">int</span> = <span class="hljs-number">-10000000</span><br><span class="hljs-keyword">var</span> sum <span class="hljs-type">int</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br>fmt.Scan(&amp;x)<br>sum += x<br><span class="hljs-keyword">if</span> max &lt; x &#123;<br>max = x<br>&#125;<br>arr = <span class="hljs-built_in">append</span>(arr, x)<br>&#125;<br><span class="hljs-keyword">var</span> count <span class="hljs-type">int</span> = <span class="hljs-number">0</span><br><span class="hljs-comment">// 找到数组里面最大的数及它出现的次数</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">if</span> max == arr[i] &#123;<br>count++<br>&#125;<br>&#125;<br>fmt.Println(sum - max*count)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>题号：<a href="https://www.luogu.com.cn/problem/B2098">B2098 整数去重</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br>fmt.Scan(&amp;n)<br><span class="hljs-keyword">var</span> used [<span class="hljs-number">110</span>]<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br>fmt.Scan(&amp;x)<br>used[x]++<br><span class="hljs-keyword">if</span> used[x] &lt; <span class="hljs-number">2</span> &#123;<br>fmt.Print(x, <span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><ul><li>字符串长度计算</li></ul><p>在Go语言中，字符串的长度是指字符串中字节的个数，而不是字符的个数。对于包含非ASCII字符的字符串，一个字符可能会占用多个字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;hello world&quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(str)) <span class="hljs-comment">// 输出11</span><br>str = <span class="hljs-string">&quot;hello 世界&quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(str)) <span class="hljs-comment">// 输出12</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>字符串遍历</li></ul><p>既可以使用传统的下标遍历，也可以使用range遍历。建议使用range遍历，因为当字符串中出现中文时，下标遍历获取的是byte类型的值，也就意味着它是将一个汉字拆成了3个byte类型字节分别输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> str &#123;<br>fmt.Printf(<span class="hljs-string">&quot;字符串中下标为 %d 的字符是 %c\n&quot;</span>, i, v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>字符串切片</li></ul><p>需要注意的是，在使用字符串切片时，下标是<font color="red"><strong>按字节计算的，而不是按字符</strong></font>计算的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">str := <span class="hljs-string">&quot;hello world&quot;</span><br>slice := str[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]  <span class="hljs-comment">// 获取str中下标为1到4的字符，不包括下标为5的字符</span><br>fmt.Println(slice)  <span class="hljs-comment">// 输出&quot;ello&quot;</span><br></code></pre></td></tr></table></figure><ul><li>字符串连接</li></ul><p>可以使用加号运算符或fmt.Sprintf函数来连接字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">str1 := <span class="hljs-string">&quot;hello&quot;</span><br>str2 := <span class="hljs-string">&quot;world&quot;</span><br>str3 := str1 + <span class="hljs-string">&quot; &quot;</span> + str2  <span class="hljs-comment">// 使用加号运算符连接字符串</span><br>fmt.Println(str3)  <span class="hljs-comment">// 输出&quot;hello world&quot;</span><br><br>str4 := fmt.Sprintf(<span class="hljs-string">&quot;%s %s&quot;</span>, str1, str2)  <span class="hljs-comment">// 使用fmt.Sprintf函数连接字符串</span><br>fmt.Println(str4)  <span class="hljs-comment">// 输出&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><ul><li>字符串查找</li></ul><p>使用strings包中的函数来查找字符串中的子串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">str := <span class="hljs-string">&quot;hello world&quot;</span><br>index := strings.Index(str, <span class="hljs-string">&quot;world&quot;</span>)  <span class="hljs-comment">// 查找子串&quot;world&quot;在str中的位置</span><br>fmt.Println(index)  <span class="hljs-comment">// 输出6</span><br></code></pre></td></tr></table></figure><ul><li>字符串替换</li></ul><p>使用strings包中的函数来替换字符串中的子串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">str := <span class="hljs-string">&quot;hello world&quot;</span><br>newstr := strings.Replace(str, <span class="hljs-string">&quot;world&quot;</span>, <span class="hljs-string">&quot;golang&quot;</span>, <span class="hljs-number">-1</span>) <span class="hljs-comment">// 将子串&quot;world&quot;替换为&quot;golang&quot;, -1表示全部替换</span><br>fmt.Println(newstr)                                   <span class="hljs-comment">// 输出&quot;hello golang&quot;</span><br></code></pre></td></tr></table></figure><ul><li>字符串转换</li></ul><p>使用strconv包中的函数进行转换。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">str := <span class="hljs-string">&quot;123&quot;</span><br>num, err := strconv.Atoi(str) <span class="hljs-comment">// 将字符串转换为整型</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;转换失败&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;转换结果是 %T\n&quot;</span>, num)<br>&#125;<br><br>num = <span class="hljs-number">123</span><br>str = strconv.Itoa(num) <span class="hljs-comment">// 将整型转换为字符串</span><br>fmt.Printf(<span class="hljs-string">&quot;转换结果是 %T\n&quot;</span>, str)<br></code></pre></td></tr></table></figure><ul><li>正则匹配（✨✨✨✨）</li></ul><table><thead><tr><th>预定义字符集</th><th>描述</th></tr></thead><tbody><tr><td>\d</td><td>匹配一个数字字符。等价于字符集 [0-9]。</td></tr><tr><td>\s</td><td>匹配一个空白字符（空格、制表符、换行符等）。等价于字符集 [ \t\n\r\f\v]。</td></tr><tr><td>\w</td><td>匹配一个单词字符。等价于字符集 [a-zA-Z0-9_]。</td></tr><tr><td>\W</td><td>匹配一个非单词字符。等价于字符集 [^a-zA-Z0-9_]。</td></tr><tr><td>\S</td><td>匹配一个非空白字符。等价于字符集 [^ \t\n\r\f\v]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于字符集 [^0-9]。</td></tr><tr><td>\b</td><td>表示单词边界，我的理解是能准确匹配到某个单词，不把包含这个单词的前缀词算在内。比如gotest就无法匹配test。</td></tr></tbody></table><p>匹配一个由汉字组成的字符串（数据清洗时常用！）：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">^[<span class="hljs-symbol">\u4e00</span>-<span class="hljs-symbol">\u9fa5</span>]+$<br></code></pre></td></tr></table></figure><p>匹配一个由邮箱地址组成的字符串（匹配恶意URL、匹配钓鱼邮箱常用）：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">^\w+<span class="hljs-comment">([-+.]\w+)</span>*@\w+<span class="hljs-comment">([-.]\w+)</span>*\.\w+<span class="hljs-comment">([-.]\w+)</span>*$<br></code></pre></td></tr></table></figure><p><strong>演示1</strong>：匹配一个字符串是否符合某个正则表达式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 定义一个正则表达式</span><br>pattern := <span class="hljs-string">&quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;</span><br><span class="hljs-comment">// 编译正则表达式</span><br>reg := regexp.MustCompile(pattern)<br><span class="hljs-comment">// 要匹配的字符串</span><br>str := <span class="hljs-string">&quot;abc123@11-2.com&quot;</span><br><span class="hljs-comment">// 判断字符串是否匹配</span><br>matched := reg.MatchString(str)<br>fmt.Println(matched)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>演示2</strong>：利用正则进行查找和替换字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 查找</span><br>str := <span class="hljs-string">&quot;hello world&quot;</span><br>re := regexp.MustCompile(<span class="hljs-string">`\b\w+o\w+\b`</span>) <span class="hljs-comment">// 匹配包含字母o的单词</span><br>newstr := re.FindAllString(str, <span class="hljs-number">-1</span>)     <span class="hljs-comment">// 将查找所有匹配的字符串</span><br>fmt.Println(newstr)<br><br><span class="hljs-comment">// 替换</span><br>str := <span class="hljs-string">&quot;hello world&quot;</span><br>re := regexp.MustCompile(<span class="hljs-string">`\b\w+o\w+\b`</span>)  <span class="hljs-comment">// 匹配包含字母o的单词</span><br>newstr := re.ReplaceAllString(str, <span class="hljs-string">&quot;golang&quot;</span>)  <span class="hljs-comment">// 将所有匹配的字符串替换为&quot;golang&quot;</span><br>fmt.Println(newstr)  <span class="hljs-comment">// 输出&quot;golang golang&quot;</span><br></code></pre></td></tr></table></figure><ul><li>题号：<a href="https://www.luogu.com.cn/problem/B2109">B2109 统计数字字符个数</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>scanner := bufio.NewScanner(os.Stdin)<br>scanner.Scan()<br>sentence := scanner.Text()<br><span class="hljs-keyword">var</span> count <span class="hljs-type">int</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> sentence &#123;<br><span class="hljs-keyword">if</span> v &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; v &lt;= <span class="hljs-string">&#x27;9&#x27;</span> &#123;<br>count++<br>&#125;<br>&#125;<br>fmt.Println(count)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Go语言的结构体和C语言很相似。</p><ul><li>结构体定义</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span><br>    Age <span class="hljs-type">int</span><br>    Height <span class="hljs-type">float32</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>结构体初始化</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">p1 := Person&#123;Name: <span class="hljs-string">&quot;Alice&quot;</span>, Age: <span class="hljs-number">20</span>, Height: <span class="hljs-number">1.65</span>&#125;  <span class="hljs-comment">// 定义一个Person类型的结构体变量p1并初始化</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">p2 := <span class="hljs-built_in">new</span>(Person)  <span class="hljs-comment">// 定义一个指向Person类型的指针变量p2，并分配内存空间</span><br></code></pre></td></tr></table></figure><ul><li>结构体元素访问（”.”号访问）</li></ul><p>指针和普通的对象类型都是使用“.”号访问。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">p1.Name = <span class="hljs-string">&quot;Alice&quot;</span>  <span class="hljs-comment">// 给p1的Name赋值为&quot;Alice&quot;</span><br>p1.Age = <span class="hljs-number">20</span>  <span class="hljs-comment">// 给p1的Age赋值为20</span><br>p1.Height = <span class="hljs-number">1.65</span>  <span class="hljs-comment">// 给p1的Height赋值为1.65</span><br></code></pre></td></tr></table></figure><p>分界线：————————————————————————————————————————————————————</p><p>Go还支持一些面向对象的编程特性，非常的灵活和强大！！！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Person)</span></span> GetInfo() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Name: %s, Age: %d, Height: %.2f&quot;</span>, p.Name, p.Age, p.Height)<br>&#125;<br><br>p1.GetInfo()  <span class="hljs-comment">// 调用p1的GetInfo方法，返回&quot;Name: Alice, Age: 20, Height: 1.65&quot;</span><br></code></pre></td></tr></table></figure><p>这个方法定义了一个<font color="red"><strong>指针类型为Person的方法GetInfo</strong></font>，用来返回一个包含Person对象信息的字符串。我们可以通过调用结构体变量的方法来实现对结构体对象的操作。这种使用方法就很棒！这就有点像类方法，GetInfo函数就是Person结构体的类方法。想要使用这个方法，那么就需要先构造一个Person的结构体对象，然后通过对象调用。</p><p>此外，Go还支持封装、继承、多态的特性，用来实现复杂的对象模型和数据结构。</p><ul><li>封装</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Person)</span></span> SetName(name <span class="hljs-type">string</span>) &#123;<br>    p.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Person)</span></span> GetName() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> p.name<br>&#125;<br></code></pre></td></tr></table></figure><p>这个结构体定义了一个名为Person的结构体类型，包含了<font color="red"><strong>两个私有的成员变量name和age</strong></font>，以及两个公有的方法SetName和GetName，用来设置和获取name成员变量的值。不同于其它语言使用Public，Private定义公有和私有，Go使用编程规范来定义这个概念。<strong>变量名首字母大写代表公有，对外可见；变量名首字母小写代表私有，对外不可见。</strong>（经过实验，上面的说法是有一个大前提的。<font color="red"><strong>同一个包内，无论是公有变量还是私有变量，在任何地方都可以访问！！！！</strong></font>，只有在<strong>不同的包</strong>里，才有上面变量名大小写来控制可见性的说法。😣😣😣）Go的变量命名主要使用驼峰命名法，也算是约定俗成吧。</p><ul><li>继承和组合</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>    Person  <span class="hljs-comment">// 匿名嵌套Person结构体</span><br>    id <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Student)</span></span> SetId(id <span class="hljs-type">string</span>) &#123;<br>    s.id = id<br>&#125;<br></code></pre></td></tr></table></figure><p>这个结构体定义了一个名为Student的结构体类型，通过匿名嵌套Person结构体，实现了从Person结构体继承了name和age成员变量和方法，并添加了一个id成员变量和SetId方法。这样，我们就可以通过Student结构体来访问和操作Person结构体的成员变量和方法。<strong>匿名嵌套是继承，不匿名就是组合的使用方法了。</strong></p><ul><li>接口多态</li></ul><p>声明一个Shape类型的接口，该接口里定义了Area()函数。Rectangle和Circle实现了Shape类型接口里的Area()的方法，可以认定为是一个实现类。PrintArea方法接受一个Shape类型的数据，然后输出面积。这个形参是Shape类型，因此，就有了一个“<strong>向上转型</strong>”的效果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Shape <span class="hljs-keyword">interface</span> &#123;<br>Area() <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Rectangle <span class="hljs-keyword">struct</span> &#123;<br>Width  <span class="hljs-type">float64</span><br>Height <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r Rectangle)</span></span> Area() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> r.Width * r.Height<br>&#125;<br><br><span class="hljs-keyword">type</span> Circle <span class="hljs-keyword">struct</span> &#123;<br>Radius <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Circle)</span></span> Area() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Pi * c.Radius * c.Radius<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PrintArea</span><span class="hljs-params">(s Shape)</span></span> &#123;<br>fmt.Println(s.Area())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := Rectangle&#123;Width: <span class="hljs-number">3</span>, Height: <span class="hljs-number">4</span>&#125;<br>c := Circle&#123;Radius: <span class="hljs-number">5</span>&#125;<br><br>PrintArea(r) <span class="hljs-comment">// 输出 12</span><br>PrintArea(c) <span class="hljs-comment">// 输出 78.53981633974483</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>题号：<a href="https://www.luogu.com.cn/problem/B3679">B3679 [语言月赛202211] Zone Selection</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> coordinate <span class="hljs-keyword">struct</span> &#123;<br>x, y     <span class="hljs-type">int</span><br>isMarked <span class="hljs-type">bool</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">distence</span><span class="hljs-params">(x1 <span class="hljs-type">int</span>, y1 <span class="hljs-type">int</span>, x2 <span class="hljs-type">int</span>, y2 <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Sqrt(math.Pow(<span class="hljs-type">float64</span>(x1-x2), <span class="hljs-number">2</span>) + math.Pow(<span class="hljs-type">float64</span>(y1-y2), <span class="hljs-number">2</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> n, k, t <span class="hljs-type">int</span><br>fmt.Scan(&amp;n, &amp;k, &amp;t)<br>coordinates := <span class="hljs-built_in">make</span>([]coordinate, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>fmt.Scan(&amp;coordinates[i].x, &amp;coordinates[i].y)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; k; i++ &#123;<br><span class="hljs-keyword">var</span> x, y <span class="hljs-type">int</span><br>fmt.Scan(&amp;x, &amp;y)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; n; j++ &#123;<br><span class="hljs-keyword">if</span> x == coordinates[j].x &amp;&amp; y == coordinates[j].y &#123;<br>coordinates[j].isMarked = <span class="hljs-literal">true</span><br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 记录最远距离的坐标，以及最远距离</span><br><span class="hljs-keyword">var</span> maxDistence <span class="hljs-type">float64</span> = <span class="hljs-number">0.0</span><br><span class="hljs-keyword">var</span> maxDistenceid <span class="hljs-type">int</span> = <span class="hljs-number">-1</span><br><span class="hljs-keyword">var</span> res <span class="hljs-type">int</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; t; i++ &#123;<br><span class="hljs-keyword">var</span> x, y <span class="hljs-type">int</span><br>fmt.Scan(&amp;x, &amp;y)<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; n; j++ &#123;<br><span class="hljs-keyword">if</span> distence(x, y, coordinates[j].x, coordinates[j].y) &gt; maxDistence &#123;<br><span class="hljs-comment">// fmt.Println(x, y, coordinates[j].x, coordinates[j].y)</span><br><span class="hljs-comment">// fmt.Println(&quot;distence:&quot;, distence(x, y, coordinates[j].x, coordinates[j].y))</span><br>maxDistence = distence(x, y, coordinates[j].x, coordinates[j].y)<br>maxDistenceid = j<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> coordinates[maxDistenceid].isMarked &#123;<br>res++<br>&#125;<br><span class="hljs-comment">// 更新最远距离</span><br>maxDistence = <span class="hljs-number">0.0</span><br>maxDistenceid = <span class="hljs-number">-1</span><br>&#125;<br>fmt.Println(res)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
